USE [MI_cbc2017]
GO

/****** Object:  StoredProcedure [CST].[MI_0541_CALC_MARA_JAVA]    Script Date: 11/12/2018 4:04:01 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








alter PROCEDURE [CST].[MI_0541_CALC_MARA_JAVA]
(@RR BIT=0, @DEBUG BIT=0) AS

BEGIN TRY
DECLARE @INFO VARCHAR(8000)
,@DB_ID INT = DB_ID()
,@LOGID INT = 0
,@PROC VARCHAR(500)=OBJECT_SCHEMA_NAME(@@PROCID)+'.'+OBJECT_NAME(@@PROCID)
,@PERF_START datetime
,@PERF_DURATION int
,@PERF_ROW INT
DECLARE @RC INT
DECLARE @MI_POST_DATE DATE
SET @PERF_START=GETDATE();
SET @MI_POST_DATE = COALESCE(DBO.FN_GETMIPARM('MI POST DATE'),'TRAP')
IF @RR=1 EXEC DBO.SP_MI_CHECKPOINT_RESET @PROC
EXEC @RC=DBO.SP_MI_CHECKPOINT_STATUS @PROC
IF @RC=-1 RAISERROR(' ',11,255)
SET @INFO = ' @RR = ' + coalesce(cast(@RR as char(1)), 'NULL') + ', @DEBUG = ' + coalesce(cast(@DEBUG as char(1)), 'NULL');
EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @INFO=@INFO, @LOG2ID=@LOGID OUT;		

--==============================================--
--======   MARA Risk Calculator   ===========--
--==============================================--
DECLARE @SQL NVARCHAR(4000)
DECLARE @CMD VARCHAR(8000)
DECLARE @MSG VARCHAR(1000)
DECLARE @DB VARCHAR(100)=DB_NAME()
IF COALESCE(DBO.FN_GETMIPARM('MARA ENABLED'),'NO') = 'YES' BEGIN


--======================

--SETUP MEASURE PERIODS
DECLARE @MARAMEM VARCHAR(5)=COALESCE(DBO.FN_GETMIPARM('MARA MEMORY'),'2048')
DECLARE @MRWFM VARCHAR(20)=COALESCE(DBO.FN_GETMIPARM('MARA RISK WINDOW FREQUENCY MONTHS'),'12')
IF @MRWFM <> 'CUSTOM' TRUNCATE TABLE DBO.MI_MARA_PROCESS_WINDOWS
DECLARE @MRWCA VARCHAR(20)=COALESCE(DBO.FN_GETMIPARM('MARA RISK WINDOW CALENDAR ALIGN'),'ANNUAL')
IF @MRWCA <> 'OFF' SET @MRWFM=1
DECLARE @MRWY TINYINT=COALESCE(DBO.FN_GETMIPARM('MARA RISK WINDOW YEARS'),'2')
DECLARE @MRWCAPC VARCHAR(20)=COALESCE(DBO.FN_GETMIPARM('MARA RISK WINDOW CALENDAR ALIGN + CURRENT'),'YES')
DECLARE @MCWLM TINYINT=COALESCE(DBO.FN_GETMIPARM('MARA CONCURRENT WINDOW LAG MONTHS'),'3')
DECLARE @REFRESH INT=COALESCE(DBO.FN_GETMIPARM('MARA REFRESH PRIOR MONTHS OF WINDOWS'),'9999')
DECLARE @MSA VARCHAR(20)=COALESCE(DBO.FN_GETMIPARM('MARA SCORE APPLICATION'),'LEADING')
DECLARE @NORMAL VARCHAR(20)=COALESCE(DBO.FN_GETMIPARM('MARA NORMALIZE'),'YES')
DECLARE @RUN_RISING_RISK CHAR(3)=COALESCE(DBO.FN_GETMIPARM('MARA RUN RISING RISK'),'NO')
DECLARE @MARAPRIORCOST VARCHAR(20)=COALESCE(DBO.FN_GETMIPARM('MARA USE PRIOR COST PREDICTOR PROSPECTIVE'),'YES')
DECLARE @MTS CHAR(6)=COALESCE(DBO.FN_GETMIPARM('MEMBER TIME SENSITIVE'),'OFF')
DECLARE @MODE CHAR(6)=COALESCE(DBO.FN_GETMIPARM('MARA GROUPER RUN MODE'),'MARA') --MARA, HCC, BOTH
DECLARE @bulkinsert NVARCHAR(2000);

EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Member_Exceptions;
CREATE TABLE #temp_MARA_Member_Exceptions
	(
		MI_PERSON_KEY INT,
		Line_Number NUMERIC(16,2),
		Reason varchar(255)
	);
EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Claim_Exceptions;
CREATE TABLE #temp_MARA_Claim_Exceptions
	(
		MI_PERSON_KEY INT,
		File_Type varchar(10),
		Line_Number NUMERIC(16,2),
		Reason varchar(255)
	);


 
EXEC DBO.SP_MI_DROPTABLE #MI_MARA_PROCESS_WINDOWS_ALL
SELECT TOP 0 * INTO #MI_MARA_PROCESS_WINDOWS_ALL
FROM DBO.MI_MARA_PROCESS_WINDOWS

EXEC DBO.SP_MI_DROPTABLE #MARAMONTHS
SELECT FIRST_DATE_IN_MONTH, CONVERT(DATE,NULL) AS GROUPER_RUN_END_MONTH
INTO #MARAMONTHS
FROM DBO.MI_YEARMO_LIST
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
WHERE FIRST_DATE_IN_MONTH >= DATEADD(M,-(SELECT (@MRWY+1)*12),(SELECT MAX(FIRST_dATE_IN_MONTH) FROM DBO.MI_YEARMO_LIST))

IF @MRWCA = 'OFF' BEGIN
    ;WITH MONTHS AS
        (
        SELECT FIRST_DATE_IN_MONTH , (ROW_NUMBER() OVER (ORDER BY FIRST_DATE_IN_MONTH DESC))-1 AS ROW FROM DBO.RFT_YEAR_MAP
        WHERE FIRST_DATE_IN_MONTH BETWEEN   
                (SELECT DATEADD(MM,-(((12*@MRWY)-1)),MAX(FIRST_DATE_IN_MONTH)) FROM  DBO.MI_YEARMO_LIST WHERE MONTH_CREDIBLE=1)  AND
                (SELECT MAX(FIRST_DATE_IN_MONTH) FROM DBO.MI_YEARMO_LIST WHERE MONTH_CREDIBLE=1) 
        )
     INSERT #MI_MARA_PROCESS_WINDOWS_ALL (RISK_YEAR_END_MONTH_START_DATE)
        SELECT FIRST_DATE_IN_MONTH  FROM MONTHS
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
        WHERE ROW/CONVERT(NUMERIC(12,2),@MRWFM)=ROW/CONVERT(INT,@MRWFM)
     END
ELSE BEGIN
     ;WITH MONTHS AS
        (
        SELECT FIRST_DATE_IN_MONTH, ROW_NUMBER() OVER (ORDER BY FIRST_DATE_IN_MONTH DESC) AS ROW FROM DBO.RFT_YEAR_MAP
        WHERE FIRST_DATE_IN_MONTH  BETWEEN   
                (SELECT DATEADD(MM,-((12*@MRWY)-1),MAX(FIRST_DATE_IN_MONTH)) FROM  DBO.MI_YEARMO_LIST WHERE MONTH_CREDIBLE=1)  AND
                (SELECT MAX(FIRST_DATE_IN_MONTH) FROM  DBO.MI_YEARMO_LIST WHERE MONTH_CREDIBLE=1) 
        AND MONTH(FIRST_DATE_IN_MONTH) IN (
        CASE WHEN @MRWCA IN ('QUARTER') THEN 3 ELSE 0 END,
        CASE WHEN @MRWCA IN ('QUARTER','BIANNUAL') THEN 6 ELSE 0 END,
        CASE WHEN @MRWCA IN ('QUARTER') THEN 9 ELSE 0 END,
        CASE WHEN @MRWCA IN ('QUARTER','BIANNUAL','ANNUAL') THEN 12 ELSE 0 END
        ))
        INSERT #MI_MARA_PROCESS_WINDOWS_ALL (RISK_YEAR_END_MONTH_START_DATE)
        SELECT FIRST_DATE_IN_MONTH  FROM MONTHS
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
        WHERE (ROW-1)/CONVERT(NUMERIC(12,2),@MRWFM)=(ROW-1)/@MRWFM
       
        IF @MRWCAPC = 'YES'
                INSERT #MI_MARA_PROCESS_WINDOWS_ALL (RISK_YEAR_END_MONTH_START_DATE)
                SELECT X FROM
                        (SELECT MAX(First_Date_In_Month) AS X FROM DBO.MI_YEARMO_LIST) A
                        LEFT JOIN #MI_MARA_PROCESS_WINDOWS_ALL B ON A.X = B.RISK_YEAR_END_MONTH_START_DATE
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
                        WHERE B.RISK_YEAR_END_MONTH_START_DATE IS NULL
       
    END


EXEC DBO.SP_MI_DROPTABLE #MI_MARA_PROCESS_WINDOWS_CONCUR
SELECT TOP 0 * INTO #MI_MARA_PROCESS_WINDOWS_CONCUR
FROM DBO.MI_MARA_PROCESS_WINDOWS

DECLARE @MCWLMDT DATE=DATEADD(M,-CONVERT(TINYINT,	@MCWLM),(SELECT MAX(FIRST_DATE_IN_MONTH) FROM DBO.MI_YEARMO_LIST WHERE MONTH_CREDIBLE=1))

 IF @MRWCA = 'OFF' BEGIN
    ;WITH MONTHS AS
        (
        SELECT FIRST_DATE_IN_MONTH , (ROW_NUMBER() OVER (ORDER BY FIRST_DATE_IN_MONTH DESC))-1 AS ROW FROM DBO.RFT_YEAR_MAP
        WHERE FIRST_DATE_IN_MONTH BETWEEN   
                (SELECT DATEADD(MM,-(((12*@MRWY)-1)),MAX(FIRST_DATE_IN_MONTH)) FROM  DBO.MI_YEARMO_LIST WHERE MONTH_CREDIBLE=1)  AND
                @MCWLMDT
        )
     INSERT #MI_MARA_PROCESS_WINDOWS_CONCUR (RISK_YEAR_END_MONTH_START_DATE)
        SELECT FIRST_DATE_IN_MONTH  FROM MONTHS
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
        WHERE ROW/CONVERT(NUMERIC(12,2),@MRWFM)=ROW/CONVERT(INT,@MRWFM)
     END
ELSE BEGIN
     ;WITH MONTHS AS
        (
        SELECT FIRST_DATE_IN_MONTH, ROW_NUMBER() OVER (ORDER BY FIRST_DATE_IN_MONTH DESC) AS ROW FROM DBO.RFT_YEAR_MAP
        WHERE FIRST_DATE_IN_MONTH  BETWEEN   
                (SELECT DATEADD(MM,-((12*@MRWY)-1),MAX(FIRST_DATE_IN_MONTH)) FROM  DBO.MI_YEARMO_LIST WHERE MONTH_CREDIBLE=1)  AND
                @MCWLMDT
        AND MONTH(FIRST_DATE_IN_MONTH) IN (
        CASE WHEN @MRWCA IN ('QUARTER') THEN 3 ELSE 0 END,
        CASE WHEN @MRWCA IN ('QUARTER','BIANNUAL') THEN 6 ELSE 0 END,
        CASE WHEN @MRWCA IN ('QUARTER') THEN 9 ELSE 0 END,
        CASE WHEN @MRWCA IN ('QUARTER','BIANNUAL','ANNUAL') THEN 12 ELSE 0 END
        ))
        INSERT #MI_MARA_PROCESS_WINDOWS_CONCUR (RISK_YEAR_END_MONTH_START_DATE)
        SELECT FIRST_DATE_IN_MONTH  FROM MONTHS
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
        WHERE (ROW-1)/CONVERT(NUMERIC(12,2),@MRWFM)=(ROW-1)/@MRWFM
       
                INSERT #MI_MARA_PROCESS_WINDOWS_CONCUR (RISK_YEAR_END_MONTH_START_DATE)
                SELECT X FROM
                        (SELECT MAX(First_Date_In_Month) AS X FROM DBO.MI_YEARMO_LIST WHERE FIRST_DATE_IN_MONTH <= @MCWLMDT) A
                        LEFT JOIN #MI_MARA_PROCESS_WINDOWS_CONCUR B ON A.X = B.RISK_YEAR_END_MONTH_START_DATE
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
                        WHERE B.RISK_YEAR_END_MONTH_START_DATE IS NULL
       
    END


DECLARE @MODELLAG CHAR(1)=COALESCE(DBO.FN_GETMIPARM('MARA MODEL SELECTOR LAG'),'0')

--DROP ANY WINDOWS THAT ARE < 12 MONTHS INTO EARLIEST INCURRED DATA
DELETE #MI_MARA_PROCESS_WINDOWS_ALL 
WHERE RISK_YEAR_END_MONTH_START_DATE < (SELECT DATEADD(M,+11,MIN(First_Date_In_Month)) FROM DBO.MI_YEARMO_LIST)
DELETE #MI_MARA_PROCESS_WINDOWS_CONCUR 
WHERE RISK_YEAR_END_MONTH_START_DATE < 
(SELECT MAX(RISK_YEAR_END_MONTH_START_DATE) FROM #MI_MARA_PROCESS_WINDOWS_ALL WHERE RISK_YEAR_END_MONTH_START_DATE < @MCWLMDT)
		

EXEC DBO.SP_MI_DROPTABLE #ALL
SELECT A.FIRST_DATE_IN_MONTH AS MEMBER_MONTH,
	CASE 
		WHEN @MSA='LEADING' THEN min(COALESCE(W2.RISK_YEAR_END_MONTH_START_DATE,W1.risk_year_end_month_start_date))
		WHEN @MSA='TRAILING' THEN max(COALESCE(W2.RISK_YEAR_END_MONTH_START_DATE,W1.risk_year_end_month_start_date))

	END AS MARA_RUN_ENDING_MONTH_ALL
INTO #ALL
from #MARAMONTHS a 
left join #MI_MARA_PROCESS_WINDOWS_ALL w1 
ON a.FIRST_DATE_IN_MONTH between dateadd(m,-11,w1.RISK_YEAR_END_MONTH_START_DATE) and w1.RISK_YEAR_END_MONTH_START_DATE  
left join #MI_MARA_PROCESS_WINDOWS_ALL w2
ON @MRWCA<>'OFF' AND a.FIRST_DATE_IN_MONTH between dateadd(m,-11,w2.RISK_YEAR_END_MONTH_START_DATE) and w2.RISK_YEAR_END_MONTH_START_DATE  AND YEAR(A.FIRST_DATE_IN_MONTH) = YEAR(W2.RISK_YEAR_END_MONTH_START_DATE)
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
group by a.first_date_in_month

EXEC DBO.SP_MI_DROPTABLE #CONCUR
SELECT A.FIRST_DATE_IN_MONTH AS MEMBER_MONTH, 
	CASE 
		WHEN @MSA='LEADING' THEN min(COALESCE(W2.RISK_YEAR_END_MONTH_START_DATE,W1.risk_year_end_month_start_date))
		WHEN @MSA='TRAILING' THEN max(COALESCE(W2.RISK_YEAR_END_MONTH_START_DATE,W1.risk_year_end_month_start_date))

	END AS MARA_RUN_ENDING_MONTH_CONCUR
INTO #CONCUR
from #MARAMONTHS a 
left join #MI_MARA_PROCESS_WINDOWS_CONCUR w1 
ON a.FIRST_DATE_IN_MONTH between dateadd(m,-11,w1.RISK_YEAR_END_MONTH_START_DATE) and w1.RISK_YEAR_END_MONTH_START_DATE  
left join #MI_MARA_PROCESS_WINDOWS_CONCUR w2
ON @MRWCA<>'OFF' AND a.FIRST_DATE_IN_MONTH between dateadd(m,-11,w2.RISK_YEAR_END_MONTH_START_DATE) and w2.RISK_YEAR_END_MONTH_START_DATE  AND YEAR(A.FIRST_DATE_IN_MONTH) = YEAR(W2.RISK_YEAR_END_MONTH_START_DATE)
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
group by a.first_date_in_month


EXEC DBO.SP_MI_DROPTABLE 'DBO.MI_MARA_MONTH_MAP'
SELECT A.MEMBER_MONTH, A.MARA_RUN_ENDING_MONTH_ALL, 
	CASE WHEN A.MARA_RUN_ENDING_MONTH_ALL  < @MCWLMDT THEN A.MARA_RUN_ENDING_MONTH_ALL
		 WHEN A.MEMBER_MONTH <= @MCWLMDT THEN 			COALESCE(B.MARA_RUN_ENDING_MONTH_CONCUR,A.MARA_RUN_ENDING_MONTH_ALL) 
		 ELSE NULL 
		 END 
				AS MARA_RUN_ENDING_MONTH_CONCUR
		,CONVERT(VARCHAR(10),'NEW') AS SCORESOURCE
INTO DBO.MI_MARA_MONTH_MAP
FROM #ALL A 
INNER JOIN  #CONCUR B
ON A.MEMBER_MONTH = B.MEMBER_MONTH
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0

CREATE UNIQUE CLUSTERED INDEX X ON DBO.MI_MARA_MONTH_MAP (MEMBER_MONTH)
-- BEFORE DECIDING WHICH WINDOWS TO RUN, SCAN FOR EXISTING MEASUREMENT WINDOWS AND POST DATES NOT EQUAL TO CURRENT POST DATE, IDENTIFYING WHICH SHOULD BE REFRESHED BASED
-- ON SETTING "MARA REFRESH PRIOR MONTHS OF WINDOWS"

EXEC DBO.SP_MI_DROPTABLE #EXISTING
SELECT DISTINCT MI_POST_DATE, MAXINCURREDDATE
INTO #EXISTING 
FROM DBO.MEMBER_MARA_RESULTS_RISK A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
WHERE MI_POST_DATE <> @MI_POST_DATE


DECLARE @MAXMONTH DATE = (SELECT MAX(MEMBER_MONTH) FROM DBO.MI_MARA_MONTH_MAP)


UPDATE M
SET SCORESOURCE='EXISTING'
FROM DBO.MI_MARA_MONTH_MAP M 
LEFT JOIN #EXISTING E1
ON M.MARA_RUN_ENDING_MONTH_CONCUR = E1.MaxIncurredDate 
LEFT JOIN #EXISTING E2
ON M.MARA_RUN_ENDING_MONTH_ALL = E2.MaxIncurredDate
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 
WHERE E1.MaxIncurredDate IS NOT NULL OR E2.MaxIncurredDate IS NOT NULL

UPDATE M
SET SCORESOURCE='NEW'
FROM DBO.MI_MARA_MONTH_MAP M 
LEFT JOIN #EXISTING E1
ON M.MARA_RUN_ENDING_MONTH_CONCUR = E1.MaxIncurredDate AND m.MARA_RUN_ENDING_MONTH_CONCUR between DATEADD(M,-@REFRESH,@MAXMONTH) and @MAXMONTH
LEFT JOIN #EXISTING E2
ON M.MARA_RUN_ENDING_MONTH_ALL = E2.MaxIncurredDate AND m.MARA_RUN_ENDING_MONTH_ALL between DATEADD(M,-@REFRESH,@MAXMONTH) and @MAXMONTH
LEFT JOIN #EXISTING E1M
ON M.MARA_RUN_ENDING_MONTH_CONCUR = E1M.MaxIncurredDate 
LEFT JOIN #EXISTING E2M
ON M.MARA_RUN_ENDING_MONTH_ALL = E2M.MaxIncurredDate
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 
WHERE E1.MaxIncurredDate IS NOT NULL OR E2.MaxIncurredDate IS NOT NULL
and (E1M.MaxIncurredDate IS NULL AND E2M.MaxIncurredDate IS NULL) 



INSERT DBO.MI_MARA_PROCESS_WINDOWS (RISK_YEAR_END_MONTH_START_DATE, CONCURRENT_ONLY)
SELECT DISTINCT MARA_RUN_ENDING_MONTH_ALL,  0 AS CONCURRENT_ONLY
   FROM DBO.MI_MARA_MONTH_MAP
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
   WHERE MARA_RUN_ENDING_MONTH_ALL IS NOT NULL AND SCORESOURCE='NEW'
	UNION ALL
		SELECT DISTINCT A.MARA_RUN_ENDING_MONTH_CONCUR, 1 AS CONCURRENT_ONLY
			FROM DBO.MI_MARA_MONTH_MAP A 
			LEFT JOIN (SELECT DISTINCT MARA_RUN_ENDING_MONTH_ALL FROM DBO.MI_MARA_MONTH_MAP) B 
				ON A.MARA_RUN_ENDING_MONTH_CONCUR = B.MARA_RUN_ENDING_MONTH_ALL 
			WHERE B.MARA_RUN_ENDING_MONTH_ALL IS NULL AND A.MARA_RUN_ENDING_MONTH_CONCUR IS NOT NULL AND A.SCORESOURCE='NEW'
 

SET @MSG=
CHAR(10)+'== SETTINGS =='+CHAR(10)+
CONVERT(CHAR(12),@MRWFM)+ ' MARA RISK WINDOW FREQUENCY MONTHS'+CHAR(10)+
CONVERT(CHAR(12),@MRWCA)+ ' MARA RISK WINDOW CALENDAR ALIGN'+CHAR(10)+
CONVERT(CHAR(12),@MRWY)+ ' MARA RISK WINDOW YEARS'+CHAR(10)+
CONVERT(CHAR(12),@MRWCAPC)+ ' MARA RISK WINDOW CALENDAR ALIGN + CURRENT'+CHAR(10)+
CONVERT(CHAR(12),@MCWLM)+ ' MARA CONCURRENT WINDOW LAG MONTHS'+CHAR(10)+
CONVERT(CHAR(12),@MSA)+ ' MARA SCORE APPLICATION'+CHAR(10)+
CONVERT(CHAR(12),@REFRESH)+ ' MARA REFRESH PRIOR MONTHS OF WINDOWS'+CHAR(10)+
CONVERT(CHAR(12),@MODE)+ ' MARA GROUPER RUN MODE'+CHAR(10)
EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG, @LOG2ID=@LOGID OUT;	



SET @MSG=
CHAR(10)+'== MARA RUNS =='+CHAR(10)+
(
SELECT CONVERT(CHAR(10),RISK_YEAR_END_MONTH_START_DATE,112)+'   '+CASE WHEN CONCURRENT_ONLY=1 THEN 'CONCURRENT' ELSE 'ALL' END+CHAR(10)
FROM
DBO.MI_MARA_PROCESS_WINDOWS X
    ORDER BY 1 DESC
    FOR XML PATH ('')
  )
EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG, @LOG2ID=@LOGID OUT;	
         
SET @MSG=
CHAR(10)+'== MEMBER MONTH RUN MAPPING =='+CHAR(10)+
CHAR(9)+CONVERT(CHAR(10),'MONTH')+'  '+CONVERT(CHAR(16),'PROSPECTIVE/AS')+'  '+COALESCE(CONVERT(CHAR(16),'CONCURRENT'),'NULL')+CHAR(10)
+CHAR(10)+
(SELECT CHAR(9)+CONVERT(CHAR(10),MEMBER_MONTH,112)+'  '+CONVERT(CHAR(16),MARA_RUN_ENDING_MONTH_ALL,112)+'  '+COALESCE(CONVERT(CHAR(16),MARA_RUN_ENDING_MONTH_CONCUR,112),'NULL')+CHAR(10)
         FROM DBO.MI_MARA_MONTH_MAP
         ORDER BY 1 DESC
         FOR XML PATH ('')
         )
EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG, @LOG2ID=@LOGID OUT;	


--======================

DECLARE @DRGPREF VARCHAR(20); SET @DRGPREF=COALESCE(DBO.FN_GETMIPARM('PREFERRED DRG'),'MS')
DECLARE @DRGPRIOR VARCHAR(20); SET @DRGPRIOR =COALESCE(DBO.FN_GETMIPARM('DRG PRIORITY'),'MI')
DECLARE @MARAEXE VARCHAR(100)='mara.jar'

-- VALIDATE PATHS AND CHECK SPACE
DECLARE @MARAINSTALLPATH VARCHAR(1000)
SET @MARAINSTALLPATH = DBO.FN_GETMIPARM('MARA INSTALL AND PROCESSING PATH')
DECLARE @MARAINSTALLPATHSHORT VARCHAR(1000)
SET @MARAINSTALLPATHSHORT = DBO.FN_MI_GETFOLDERSHORTPATH(@MARAINSTALLPATH)
IF NULLIF(@MARAINSTALLPATH,'') IS NULL OR NULLIF(@MARAINSTALLPATHSHORT,'') IS NULL BEGIN
        SET @MSG='MARA INSTALL AND PROCESSING PATH INVALID: '+ @MARAINSTALLPATH
        RAISERROR (@MSG,16,1)
        END
SET @MSG='MARA INSTALL AND PROCESSING PATH: '+@MARAINSTALLPATH+'   '+@MARAINSTALLPATHSHORT
EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG, @LOG2ID=@LOGID OUT;	


DECLARE @MINMON DATE=(SELECT DATEADD(M,-11,MIN(RISK_YEAR_END_MONTH_START_DATE)) FROM DBO.MI_MARA_PROCESS_WINDOWS) 
DECLARE @MAXMON DATE=(SELECT MAX(RISK_YEAR_END_MONTH_START_DATE) FROM DBO.MI_MARA_PROCESS_WINDOWS)


SET @MSG='SCANNING ENROLLMENT '
EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG, @LOG2ID=@LOGID OUT;	

		EXEC DBO.sp_mi_droptable 'DBO.TEMP_MARA_MEMBERS_ALL'

        SELECT     P.MI_PERSON_KEY,
                   MAX(P.MEM_DOB) AS MEM_DOB,
                   E.MEMBER_MONTH_START_DATE,
                   MAX(E.GENDER) AS GENDER,
                   MAX(LEFT(R.MI_RELATION,2)) AS RELATION, 
                   SUM(MM_UNITS) AS MM_UNITS,
                   SUM(RX_UNITS) AS RX_UNITS,
				   MAX(CONVERT(CHAR(1),CASE WHEN PL.PAYER_LOB = 'MEDICARE' THEN 'M' ELSE 'O' END)) AS LOBGROUP,
				   MAX(HHS_PLAN_METAL_LEVEL) AS HHS_PLAN_METAL_LEVEL,
                   MAX(HHS_CSR_VALUE) AS HHS_CSR_VALUE                                      
			INTO DBO.TEMP_MARA_MEMBERS_ALL
                FROM   [DBO].MEMBER_MONTH E 
								 LEFT JOIN DBO.RFT_PAYER_TYPE PT ON E.PAYER_TYPE_KEY = PT.PAYER_TYPE_KEY
								 LEFT JOIN DBO.RFT_PAYER_LOB PL ON PT.PAYER_LOB_KEY = PL.PAYER_LOB_KEY
                                 LEFT JOIN   [DBO].[RFT_RELATION] R ON E.RELATION_KEY = R.RELATION_KEY
                                 LEFT JOIN   [DBO].MEMBER P ON P.MEMBER_KEY = E.MEMBER_KEY
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
                WHERE P.MEM_DOB IS NOT NULL 
                                  AND E.GENDER IN ('M', 'F')
                                  AND (E.MM_UNITS <> 0 OR E.RX_UNITS <> 0)
                                  AND E.MEMBER_MONTH_START_DATE BETWEEN @MINMON AND @MAXMON 
                GROUP BY MEMBER_MONTH_START_DATE, P.MI_PERSON_KEY

                CREATE UNIQUE CLUSTERED INDEX UC ON DBO.TEMP_MARA_MEMBERS_ALL (LOBGROUP, MEMBER_MONTH_START_DATE, MI_PERSON_KEY)

SET @PERF_ROW=@@ROWCOUNT; 
SET @MSG='EXTRACTED ALL POSSIBLE MEMBERS '
SET @PERF_DURATION=DATEDIFF(MINUTE,@PERF_START,GETDATE());
EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG,@PERF_ROW, @DURATION_IN_MIN=@PERF_DURATION, @LOG2ID=@LOGID


   EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_CLAIMS_ALL'
   
   
        SELECT			P.MI_PERSON_KEY,
                        CS.CLAIM_ID_KEY,
                        COALESCE(CS.SV_LINE,'') AS SV_LINE,
                        CS.FROM_DATE,
                        CS.TO_DATE,
                        CS.PAID_DATE,
                        REPLACE(CASE WHEN DRG.DRG_KEY=0 OR DRG.DRG_KEY IS NULL THEN NULL ELSE DRG.DRG_CODE END,',','') AS DRG,
                        CONVERT(CHAR(1),
                                CASE
                                        WHEN @DRGPREF='MS' AND DRG.DRG_KEY>0 THEN 'M'
                                        WHEN @DRGPREF='TRI' AND DRG.DRG_KEY>0 THEN 'T'
                                        WHEN @DRGPREF='AP' AND DRG.DRG_KEY>0 THEN 'A'
                                        WHEN @DRGPREF='APR' AND DRG.DRG_KEY>0 THEN 'R'
                                        ELSE ''
                                        END) AS DRGVersion,
                   REPLACE(CP.PROC_CODE,',','') AS PROC_CODE,
                   REPLACE(RV.REV_CODE,',','') AS REV_CODE,
                   PR.PROV_CW_KEY AS PROV_ID,
                   REPLACE(PR.PROV_TYPE,',','') AS PROV_TYPE,
                   REPLACE(PT.POS,',','') AS POS,
                   CONVERT(VARCHAR(14),CONVERT(NUMERIC(12,2),CS.AMT_BILLED)) AS CHARGED,
                   CONVERT(VARCHAR(14),CONVERT(NUMERIC(12,2),CS.AMT_ALLOWED)) AS ALLOWED,
                   CONVERT(VARCHAR(14),CONVERT(NUMERIC(12,2),CS.AMT_PAID)) AS PAID,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_01_KEY =0 THEN NULL ELSE DI1.ICD_DIAG END),',','') AS DIAGCODE1,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_02_KEY =0 THEN NULL ELSE DI2.ICD_DIAG END),',','') AS DIAGCODE2,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_03_KEY =0 THEN NULL ELSE DI3.ICD_DIAG END),',','') AS DIAGCODE3,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_04_KEY =0 THEN NULL ELSE DI4.ICD_DIAG END),',','') AS DIAGCODE4,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_05_KEY =0 THEN NULL ELSE DI5.ICD_DIAG END),',','') AS DIAGCODE5,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_06_KEY =0 THEN NULL ELSE DI6.ICD_DIAG END),',','') AS DIAGCODE6,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_07_KEY =0 THEN NULL ELSE DI7.ICD_DIAG END),',','') AS DIAGCODE7,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_08_KEY =0 THEN NULL ELSE DI8.ICD_DIAG END),',','') AS DIAGCODE8,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_09_KEY =0 THEN NULL ELSE DI9.ICD_DIAG END),',','') AS DIAGCODE9,
                   REPLACE(RTRIM(CASE WHEN CS.ICD_DIAG_10_KEY =0 THEN NULL ELSE DI10.ICD_DIAG END),',','') AS DIAGCODE10,
                   REPLACE(RTRIM(CASE WHEN CS2.ICD_DIAG_11_KEY =0 THEN NULL ELSE DI11.ICD_DIAG END),',','') AS DIAGCODE11,
                   REPLACE(RTRIM(CASE WHEN CS2.ICD_DIAG_12_KEY =0 THEN NULL ELSE DI12.ICD_DIAG END),',','') AS DIAGCODE12,
                   REPLACE(RTRIM(CASE WHEN CS2.ICD_DIAG_13_KEY =0 THEN NULL ELSE DI13.ICD_DIAG END),',','') AS DIAGCODE13,
                   REPLACE(RTRIM(CASE WHEN CS2.ICD_DIAG_14_KEY =0 THEN NULL ELSE DI14.ICD_DIAG END),',','') AS DIAGCODE14,
                   REPLACE(RTRIM(CASE WHEN CS2.ICD_DIAG_15_KEY =0 THEN NULL ELSE DI15.ICD_DIAG END),',','') AS DIAGCODE15,
                   MR.MR_LINE AS MR_LINE,
                   REPLACE(N.NDC,',','') as NDC,
                   CONVERT(VARCHAR(14),CONVERT(NUMERIC(12,0),S_Rx.RX_DAYS_SUPPLY)) AS DAYSSUPPLIED
        INTO DBO.TEMP_MARA_CLAIMS_ALL
                FROM   [dbo].SERVICES CS 
						INNER JOIN DBO.MEMBER P ON CS.MEMBER_KEY = P.MEMBER_KEY
                        LEFT JOIN   [dbo].SERVICES_2 CS2 on CS.[SERVICE_MONTH_START_DATE]=CS2.[SERVICE_MONTH_START_DATE]
                                                                                                AND CS.[CLAIM_ID_KEY] = CS2.[CLAIM_ID_KEY]
                                                                                                AND CS.[SERVICES_KEY] = CS2.[SERVICES_KEY]
                                                                                                AND CS.[MI_POST_DATE] = CS2.[MI_POST_DATE]
                        LEFT JOIN   [dbo].SERVICES_UB SU on CS.[SERVICE_MONTH_START_DATE]=SU.[SERVICE_MONTH_START_DATE]
                                                                                                AND CS.[CLAIM_ID_KEY] = SU.[CLAIM_ID_KEY]
                                                                                                AND CS.[SERVICES_KEY] = SU.[SERVICES_KEY]
                                                                                                AND CS.[MI_POST_DATE] = SU.[MI_POST_DATE]
                        LEFT JOIN DBO.SERVICES_RX S_RX  ON      CS.SERVICE_MONTH_START_DATE=S_RX.SERVICE_MONTH_START_DATE
                                AND CS.CLAIM_ID_KEY = S_RX.CLAIM_ID_KEY
                                AND CS.SERVICES_KEY = S_RX.SERVICES_KEY
                                AND CS.MI_POST_DATE = S_RX.MI_POST_DATE
                        LEFT JOIN [dbo].RFT_NDC N ON N.NDC_KEY = S_Rx.NDC_KEY
                        LEFT JOIN DBO.RFT_DRG DRG
                                ON CASE
                                                WHEN @DRGPREF='MS' AND @DRGPRIOR = 'MI' THEN MI_MS_DRG_KEY
                                                WHEN @DRGPREF='TRI' AND @DRGPRIOR = 'MI' THEN MI_TRI_DRG_KEY
                                                WHEN @DRGPREF='AP' AND @DRGPRIOR = 'MI' THEN MI_AP_DRG_KEY
                                                WHEN @DRGPREF='APR' AND @DRGPRIOR = 'MI' THEN MI_APR_DRG_KEY
                                                WHEN @DRGPREF='MS' AND @DRGPRIOR = 'CLIENT' THEN MS_DRG_KEY
                                                WHEN @DRGPREF='TRI' AND @DRGPRIOR = 'CLIENT' THEN TRI_DRG_KEY
                                                WHEN @DRGPREF='AP' AND @DRGPRIOR = 'CLIENT' THEN AP_DRG_KEY
                                                WHEN @DRGPREF='APR' AND @DRGPRIOR = 'CLIENT' THEN APR_DRG_KEY
                                                ELSE NULL
                                                END                             
                                                                = DRG.DRG_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI1 ON DI1.ICD_DIAG_KEY = CS.ICD_DIAG_01_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI2 ON DI2.ICD_DIAG_KEY = CS.ICD_DIAG_02_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI3 ON DI3.ICD_DIAG_KEY = CS.ICD_DIAG_03_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI4 ON DI4.ICD_DIAG_KEY = CS.ICD_DIAG_04_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI5 ON DI5.ICD_DIAG_KEY = CS.ICD_DIAG_05_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI6 ON DI6.ICD_DIAG_KEY = CS.ICD_DIAG_06_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI7 ON DI7.ICD_DIAG_KEY = CS.ICD_DIAG_07_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI8 ON DI8.ICD_DIAG_KEY = CS.ICD_DIAG_08_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI9 ON DI9.ICD_DIAG_KEY = CS.ICD_DIAG_09_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI10 ON DI10.ICD_DIAG_KEY = CS.ICD_DIAG_10_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI11 ON DI11.ICD_DIAG_KEY = CS2.ICD_DIAG_11_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI12 ON DI12.ICD_DIAG_KEY = CS2.ICD_DIAG_12_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI13 ON DI13.ICD_DIAG_KEY = CS2.ICD_DIAG_13_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI14 ON DI14.ICD_DIAG_KEY = CS2.ICD_DIAG_14_KEY
                        LEFT JOIN   [dbo].RFT_ICD_DIAG DI15 ON DI15.ICD_DIAG_KEY = CS2.ICD_DIAG_15_KEY
                        LEFT JOIN   [dbo].RFT_PROC_CODE CP ON CS.PROC_CODE_KEY = CP.PROC_CODE_KEY
                        LEFT JOIN   [dbo].RFT_REV_CODE RV ON SU.REV_CODE_KEY = RV.REV_CODE_KEY
                        LEFT JOIN   [dbo].PROVIDER    PR ON CS.ATT_PROV_KEY = PR.PROV_KEY
                        LEFT JOIN   [dbo].RFT_POS  PT ON CS.POS_KEY = PT.POS_KEY
                        LEFT JOIN   [dbo].RFT_MRLINE_TAB MR ON CS.MR_LINE_CASE_KEY = MR.MR_LINE_KEY
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
				WHERE CS.SERVICE_MONTH_START_DATE BETWEEN @MINMON AND @MAXMON 
                CREATE CLUSTERED INDEX UC ON DBO.TEMP_MARA_CLAIMS_ALL (FROM_DATE, MR_LINE, MI_PERSON_KEY)
                
                
                
SET @PERF_ROW=@PERF_ROW+@@ROWCOUNT
SET @MSG='EXTRACTED ALL POSSIBLE CLAIMS '
SET @PERF_DURATION=DATEDIFF(MINUTE,@PERF_START,GETDATE());
EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG,@PERF_ROW, @DURATION_IN_MIN=@PERF_DURATION, @LOG2ID=@LOGID


		
	


IF @MODE IN ('MARA','BOTH') BEGIN
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_Risk','OFF',@ALL='TRUE';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_Class','OFF',@ALL='TRUE';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_Script','OFF',@ALL='TRUE';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION','OFF',@ALL='TRUE';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'MEMBER_MARA_RESULTS_RISING_RISK','OFF',@ALL='TRUE';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT

	IF EXISTS (SELECT TOP 1 1 FROM dbo.Member_MARA_Results_Risk WHERE mi_post_date = @MI_POST_DATE) BEGIN
			BEGIN TRAN
			EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_Member_MARA_Results_Risk_0000'
			SELECT A.* INTO DBO.TEMP_Member_MARA_Results_Risk_0000 FROM dbo.Member_MARA_Results_Risk AS A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 WHERE MI_POST_dATE <> @MI_POST_DATE
			EXEC DBO.SP_MI_DROPTABLE 'dbo.Member_MARA_Results_Risk'
			EXEC SP_RENAME 'DBO.TEMP_Member_MARA_Results_Risk_0000','Member_MARA_Results_Risk'
			COMMIT
		END
	IF EXISTS (SELECT TOP 1 1 FROM dbo.Member_MARA_Results_Class WHERE mi_post_date = @MI_POST_DATE) BEGIN
		BEGIN TRAN
			EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_Member_MARA_Results_Class_0000'
			SELECT A.* INTO DBO.TEMP_Member_MARA_Results_Class_0000 FROM dbo.Member_MARA_Results_Class AS A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 WHERE MI_POST_dATE <> @MI_POST_DATE
			EXEC DBO.SP_MI_DROPTABLE 'dbo.Member_MARA_Results_Class'
			EXEC SP_RENAME 'DBO.TEMP_Member_MARA_Results_Class_0000','Member_MARA_Results_Class'
			COMMIT
		END
		--LW 11/15
	IF EXISTS (SELECT TOP 1 1 FROM dbo.Member_MARA_Results_Script_LW WHERE mi_post_date = @MI_POST_DATE) BEGIN
		BEGIN TRAN
			EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_Member_MARA_Results_Script_0000'
			SELECT A.* INTO DBO.TEMP_Member_MARA_Results_Script_0000 FROM dbo.Member_MARA_Results_Script_LW AS A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 WHERE MI_POST_dATE <> @MI_POST_DATE
			EXEC DBO.SP_MI_DROPTABLE 'dbo.Member_MARA_Results_Script_LW'
			EXEC SP_RENAME 'DBO.TEMP_Member_MARA_Results_Script_0000','Member_MARA_Results_Script_LW'
			COMMIT
		END
	IF EXISTS (SELECT TOP 1 1 FROM dbo.Member_MARA_Exceptions WHERE mi_post_date = @MI_POST_DATE) BEGIN
		BEGIN TRAN
			EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_Member_MARA_Exceptions_0000'
			SELECT A.* INTO DBO.TEMP_Member_MARA_Exceptions_0000 FROM dbo.Member_MARA_Exceptions AS A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 WHERE MI_POST_dATE <> @MI_POST_DATE
			EXEC DBO.SP_MI_DROPTABLE 'dbo.Member_MARA_Exceptions'
			EXEC SP_RENAME 'DBO.TEMP_Member_MARA_Exceptions_0000','Member_MARA_Results_Script'
			COMMIT
		END


	IF EXISTS (SELECT TOP 1 1 FROM DBO.MEMBER_MARA_RESULTS_RISING_RISK WHERE mi_post_date = @MI_POST_DATE) BEGIN
		BEGIN TRAN
			EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MEMBER_MARA_RESULTS_RISING_RISK_0000'
			SELECT A.* INTO DBO.TEMP_MEMBER_MARA_RESULTS_RISING_RISK_0000 FROM DBO.MEMBER_MARA_RESULTS_RISING_RISK AS A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 WHERE MI_POST_DATE <> @MI_POST_DATE
			EXEC DBO.SP_MI_DROPTABLE 'DBO.MEMBER_MARA_RESULTS_RISING_RISK'
			EXEC SP_RENAME 'DBO.TEMP_MEMBER_MARA_RESULTS_RISING_RISK_0000','MEMBER_MARA_RESULTS_RISING_RISK'
			COMMIT
		END

		IF EXISTS (SELECT TOP 1 1 FROM DBO.MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION WHERE mi_post_date = @MI_POST_DATE) BEGIN
		BEGIN TRAN
			EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION_0000'
			SELECT A.* INTO DBO.TEMP_MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION_0000 FROM DBO.MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION AS A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 WHERE MI_POST_DATE <> @MI_POST_DATE
			EXEC DBO.SP_MI_DROPTABLE 'DBO.MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION'
			EXEC SP_RENAME 'DBO.TEMP_MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION_0000','MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION'
			COMMIT
		END

	END
IF @MODE IN ('HCC','BOTH') BEGIN
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_HCC_Risk','OFF',@ALL='TRUE';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_HCC_Class','OFF',@ALL='TRUE';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT

	IF EXISTS (SELECT TOP 1 1 FROM dbo.Member_MARA_Results_HCC_Risk WHERE mi_post_date = @MI_POST_DATE) BEGIN
		BEGIN TRAN
			EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_Member_MARA_Results_HCC_Risk_0000'
			SELECT A.* INTO DBO.TEMP_Member_MARA_Results_HCC_Risk_0000 FROM dbo.Member_MARA_Results_HCC_Risk AS A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 WHERE MI_POST_dATE <> @MI_POST_DATE
			EXEC DBO.SP_MI_DROPTABLE 'dbo.Member_MARA_Results_HCC_Risk'
			EXEC SP_RENAME 'DBO.TEMP_Member_MARA_Results_HCC_Risk_0000','Member_MARA_Results_HCC_Risk'
			COMMIT
		END
	IF EXISTS (SELECT TOP 1 1 FROM dbo.Member_MARA_Results_HCC_Class WHERE mi_post_date = @MI_POST_DATE) BEGIN
		BEGIN TRAN
			EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_Member_MARA_Results_HCC_Class_0000'
			SELECT A.* INTO DBO.TEMP_Member_MARA_Results_HCC_Class_0000 FROM dbo.Member_MARA_Results_HCC_Class AS A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 WHERE MI_POST_dATE <> @MI_POST_DATE
			EXEC DBO.SP_MI_DROPTABLE 'dbo.Member_MARA_Results_HCC_Class'
			EXEC SP_RENAME 'DBO.TEMP_Member_MARA_Results_HCC_Class_0000','Member_MARA_Results_HCC_Class'
			COMMIT
		END
	IF EXISTS (SELECT TOP 1 1 FROM dbo.Member_MARA_Exceptions WHERE mi_post_date = @MI_POST_DATE) BEGIN
		BEGIN TRAN
			EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_Member_MARA_Exceptions_0000'
			SELECT A.* INTO DBO.TEMP_Member_MARA_Exceptions_0000 FROM dbo.Member_MARA_Exceptions AS A
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 WHERE MI_POST_dATE <> @MI_POST_DATE
			EXEC DBO.SP_MI_DROPTABLE 'dbo.Member_MARA_Exceptions'
			EXEC SP_RENAME 'DBO.TEMP_Member_MARA_Exceptions_0000','Member_MARA_Results_Script'
			COMMIT
		END
	END




DECLARE @BAT varchar(8000)
declare @RESULT INT
declare @command varchar(8000)
declare @XMLOUT varchar(8000)
declare @MAXLENMKEY tinyint=(select max(len(convert(varchar(12),MI_PERSON_KEY))) from DBO.TEMP_MARA_MEMBERS_ALL)
declare @DTSTRING char(8)
DECLARE @OUTERLOOP INT;
DECLARE @INNERLOOP INT;
--Get the Maximum incurred date for claims
DECLARE @MaxIncurredDt date
DECLARE @CONCONLY bit
DECLARE XLOOP CURSOR FOR SELECT RISK_YEAR_END_MONTH_START_DATE, CONCURRENT_ONLY FROM DBO.MI_MARA_PROCESS_WINDOWS ORDER BY 1 DESC
OPEN XLOOP
FETCH NEXT FROM XLOOP INTO @MAXINCURREDDT, @CONCONLY
SET @OUTERLOOP = @@FETCH_STATUS
WHILE @OUTERLOOP = 0 BEGIN
PRINT @OUTERLOOP

--Set up the Member table and Claims Views for the MARA calculator
--EXEC @RC = MI_0525b_MARA_Create_Data_Tables @MI_POST_DATE  --2011.01.04 kal Changed to MaxIncurredDt

	
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_InvalidMember.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_InvalidClaim.txt' 
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_ModelOut.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_ClassOut.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_InvalidMember.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_InvalidClaim.txt' 
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ModelOut.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ClassOut.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Rx.csv'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Med.csv'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Members.csv'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT

 
		
	SET @MSG=CHAR(10)+'*** STARTING MARA RUN FOR ENDING MONTH:  '+CONVERT(CHAR(10),@MaxIncurredDt,112)+CHAR(10)
	SET @DTSTRING=CONVERT(CHAR(8),@MaxIncurredDt,112)
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;
-- SCAN ENROLLMENT TO IDENTIFY MODEL SET FOR THIS WINDOW
	EXEC DBO.SP_MI_DROPTABLE #PRODUCTS
	SELECT DISTINCT LOBGROUP, MM_UNITS, RX_UNITS
		INTO #PRODUCTS
	FROM 
		(
			SELECT DISTINCT LOBGROUP, MI_PERSON_KEY, MM_UNITS, RX_UNITS
			FROM   DBO.TEMP_MARA_MEMBERS_ALL E
                WHERE MEMBER_MONTH_START_DATE BETWEEN
				DATEADD(M,-11,@MaxIncurredDt) AND @MaxIncurredDt
		) X
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
			
	--SET UP MODEL SELECTORS AND REPORT..  if there is any medicare here, we just run medicare for all members.  
	--A potential performance gain might be had from splitting the runs up between medicare and non-medicare.
		EXEC DBO.SP_MI_DROPTABLE #TEMPMODELS
		SELECT DISTINCT MARA_MODEL_ID
		INTO #TEMPMODELS
		FROM /*
			(SELECT DISTINCT MARA_MODEL_ID
				FROM DBO.MI_MARA_MODELS A CROSS JOIN (SELECT * FROM #PRODUCTS /*WHERE LOBGROUP='O'*/) B
				WHERE	(B.MM_UNITS <> 0 AND B.RX_UNITS <> 0 AND (A.MARA_MODEL_ID  = 'CXCONLAG0' OR A.MARA_MODEL_ID = 'CXPROLAG'+@MODELLAG OR A.MARA_MODEL_ID = 'ASCONLAG0'))
						OR
						(B.MM_UNITS <> 0 AND B.RX_UNITS = 0 AND (A.MARA_MODEL_ID  = 'DXCONLAG0' OR A.MARA_MODEL_ID = 'DXPROLAG'+@MODELLAG OR A.MARA_MODEL_ID = 'ASCONLAG0'))	
						OR
						(B.MM_UNITS = 0 AND B.RX_UNITS <> 0 AND (A.MARA_MODEL_ID  = 'RXCONLAG0' OR A.MARA_MODEL_ID = 'RXPROLAG'+@MODELLAG OR A.MARA_MODEL_ID = 'ASCONLAG0'))	
			UNION
			SELECT DISTINCT MARA_MODEL_ID
				FROM DBO.MI_MARA_MODELS A CROSS JOIN (SELECT * FROM #PRODUCTS WHERE LOBGROUP='M') B
				WHERE	(B.MM_UNITS <> 0 AND (A.MARA_MODEL_ID  = 'MCCONLAG0' OR A.MARA_MODEL_ID  = 'MCPROLAG0' OR A.MARA_MODEL_ID = 'ASCONLAG0'))
				) M
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 */
			-- GET RX AND DX AS WELL FOR SURE FOR HRT --										
		(SELECT DISTINCT MARA_MODEL_ID										
		FROM DBO.MI_MARA_MODELS										
		WHERE RIGHT(RTRIM(MARA_MODEL_ID),1) = '0' 										
	AND LEFT(MARA_MODEL_ID,2) <> 'MC'									
	-- LW 7/8 Just exclude MCC models
	--AND MARA_MODEL_ID NOT IN ('ASPROLAG0','DXPROLAG0','RXPROLAG0')
	 ) M	
		
		
		-- IF THIS IS A CONCURRENT-ONLY RUN, DROP EVERYTHING BUT CONCURRENT RISK MODELS.
		EXEC DBO.SP_MI_DROPTABLE #MODELS 
		SELECT MARA_MODEL_ID, ROW_NUMBER() OVER(ORDER BY MARA_MODEL_ID) AS ROWID 
			INTO #MODELS
			FROM #TEMPMODELS
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0 
			WHERE NOT (@CONCONLY = 1 AND MARA_MODEL_ID NOT LIKE '_XCONLAG_'  AND MARA_MODEL_ID <> 'MCCONLAG0')

		DECLARE @MARAModelNames VARCHAR(500)='' 

		DECLARE @CTR TINYINT=1
		DECLARE @MAX TINYINT=(SELECT MAX(ROWID) FROM #MODELS) -- CANT CAPTURE @@ROWCOUNT ABOVE

		WHILE @CTR <= @MAX BEGIN
			SET @MARAModelNames=@MARAModelNames+
							(SELECT RTRIM(MARA_MODEL_ID) FROM #MODELS WHERE ROWID=@CTR)+
							CASE WHEN @CTR<@MAX THEN ',' ELSE '' END
			SET @CTR=@CTR+1
			END

		SET @MSG='MARA MODEL(S) TO RUN FOR THIS RISK ENDING MONTH: '+@MARAMODELNAMES
		EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;

        EXEC @RC=dbo.MI_8110_MARA_MEMBERS	@MaxIncurredDt, @maxlenmkey, @MARAINSTALLPATHSHORT, @DB, @DTSTRING
		IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
               
        Declare @MARASubjects int
        SELECT @MARASubjects = count(*) from DBO.TEMP_MARA_MEMBERS_WINDOW
 
        EXEC @RC=dbo.MI_8110_MARA_MEDICAL	@MaxIncurredDt, @maxlenmkey, @MARAINSTALLPATHSHORT, @DB, @DTSTRING
		IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT

        EXEC @RC=dbo.MI_8110_MARA_RX		@MaxIncurredDt, @maxlenmkey, @MARAINSTALLPATHSHORT, @DB, @DTSTRING
		IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT

IF @MODE IN ('BOTH','MARA') BEGIN


		EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_BATCH_FILE'
		SET @BAT = LEFT(@MARAINSTALLPATHSHORT, 2) + char(10) + CHAR(13) +
		'CD "' + @MARAINSTALLPATHSHORT + '"' + char(10) + char(13) +
		'java -jar -Xmx'+@MARAMEM+'m '+@MARAEXE+' '+@DB+'_'+@DTSTRING+'_settings.xml'
		select @BAT as BATTEXT into DBO.TEMP_MARA_BATCH_FILE
		--then we execute the BCP to save the file
		  SELECT  @command = 'bcp "select BATTEXT FROM ' + @DB + '.DBO.TEMP_MARA_BATCH_FILE" queryout ' + '"' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_mara.bat"' + ' -c -T -S '+@@SERVERNAME
		  EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @command, @LOG2ID=@LOGID;
		  EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
		EXEC DBO.SP_MI_DROPTABLE 'dbo.TEMP_MARA_BATCH_FILE'

		EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_XMLOUT'	
		SET @XMLOUT =
		'<?xml version="1.0" encoding="UTF-8"?>' + char(10) +
		'<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">' + char(10) +
		'<properties>' + char(10) +
		'<comment>' + char(10) +
		'MARA Properties' + char(10) +
		'</comment>' + char(10) +
		'<entry key="Member_Input_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Members.csv</entry>' + char(10) +
		'<entry key="Medical_Claim_Input_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Med.csv</entry>' + char(10) +
		'<entry key="Pharmacy_Claim_Input_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Rx.csv</entry>' + char(10) +
		'<entry key="Model_Output_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ModelOut.txt</entry>' + char(10) +
		'<entry key="Med_Classification_Output_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ClassOut.txt</entry>' + char(10) +
		'<entry key="Data_Quality_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_DataQuality.txt</entry>' + char(10) +
		'<entry key="Log_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Log.txt</entry>' + char(10) +
		'<entry key="Invalid_Member_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_InvalidMember.txt</entry>' + char(10) +
		'<entry key="Invalid_Claim_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_InvalidClaim.txt</entry>' + char(10) +
		'<entry key="License_File_Location">' + @MARAINSTALLPATHSHORT + '\mara.lic</entry>' + char(10) +
		'<entry key="MARA_APP_Folder_Location">' + @MARAINSTALLPATHSHORT + '\Application Data\</entry>' + char(10) +
		'<entry key="End_Claim_Collection_Period_Date">' + CONVERT(VARCHAR(10), DATEADD(D,-1,DATEADD(M,+1,@MaxIncurredDt)), 101) + '</entry>' + char(10) +
		'<entry key="Model_List">' + @MARAMODELNAMES + '</entry>' + char(10) +
		'<entry key="Input_File_Date_Format">MM/dd/yyyy</entry>' + char(10) +
		'<entry key="Number_Diagnoses">15</entry>' + char(10) +
		'<entry key="Number_Report_Variable_Fields">3</entry>' + char(10) +
		'<entry key="Output_Percent_Contributions">True</entry>' + char(10) +
		'<entry key="Use_Prior_Cost_Predictor_Prospective">' + CASE WHEN @MARAPRIORCOST = 'YES' THEN 'TRUE' ELSE 'FALSE' END+ '</entry>' + char(10) +
		'<entry key="Output_Extra_Member_Detail">False</entry>' + char(10) +
		'</properties>'
		select @XMLOUT as xmlText into DBO.TEMP_MARA_XMLOUT
		--then we execute the BCP to save the file
		  SELECT  @command = 'bcp "select xmlText from ' + @DB + '.DBO.TEMP_MARA_XMLOUT'
				  + '" queryout '
				  + '"' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Settings.xml"' + ' '
				 + '-c'
				  + ' -T -S '+@@SERVERNAME
		          
		  EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
		 
				EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_XMLOUT'
		       
	SET @MSG='MARA CALCULATIONS START';
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;
	SET @CMD = @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_mara.bat'
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @CMD, @LOG2ID=@LOGID;
	DECLARE @LASTROWID BIGINT
	DECLARE @CMDOUT TABLE (ROWID INT IDENTITY(1,1), PROCNAME VARCHAR(100), OUTLINE VARCHAR(1000), TSTAMP DATETIME2)
	INSERT @CMDOUT (OUTLINE)
	  EXEC @RC=master..xp_cmdshell @CMD
	SET @LASTROWID=@@IDENTITY
	UPDATE @CMDOUT SET PROCNAME=@PROC, TSTAMP=SYSDATETIME()
	WHERE ROWID BETWEEN @LASTROWID-10 AND @LASTROWID

	SELECT @PERF_ROW= CONVERT(INT,REPLACE(OUTLINE,' rows copied.','')) 
					   FROM @CMDOUT WHERE OUTLINE LIKE '%copied%'

	IF @RC > 0 OR EXISTS (SELECT * FROM @CMDOUT WHERE OUTLINE LIKE '%Error%' OR OUTLINE LIKE '%License%') BEGIN
			SET @MSG=(SELECT OUTLINE+CHAR(10) FROM @CMDOUT WHERE ROWID BETWEEN (SELECT MAX(ROWID)-10 FROM @CMDOUT) AND (SELECT MAX(ROWID) FROM @CMDOUT) ORDER BY ROWID FOR XML PATH(''))
			SET @MSG='MARA GROUPER FAILURE'+CHAR(10)+CHAR(10)+@MSG
		    EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @CMD,@PERF_ROW, @LOG2ID=@LOGID;

	END
	SET @PERF_DURATION=DATEDIFF(MINUTE,@PERF_START,GETDATE());
    SET @PERF_START=GETDATE();
	SET @MSG='MARA CALCULATIONS COMPLETE'
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG, @DURATION_IN_MIN=@PERF_DURATION, @LOG2ID=@LOGID
	-- Import the Member_MARA_Results_Class data
	EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Results_Class;
	CREATE TABLE #temp_MARA_Results_Class
	(
		MI_PERSON_KEY INT,
		Category varchar(50),
		[Count] NUMERIC(12,2),
		MaxMonth NUMERIC(12,2)
	);
			/*exec DBO.SP_MI_DROPTABLE #classheader
			create table #classheader
			(line varchar(max))
	       
			set @sql = 'bulk insert #classheader ' +
			'from ''' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ClassOut.txt''' +
			'with (firstrow=1, lastrow=1)'
			exec sp_executesql @sql
	       
			declare @header varchar(max)=(select line from #classheader)
	       
			set @sql =
			(select 'alter table #temp_MARA_Results_Class add '+REPLACE(LINE,'_%','')+' NUMERIC(10,4)'+CHAR(10)
			from DBO.SP_MI_SPLITTEXT(@header,',')
			where LINENUM >= 5
			order by LINENUM
			FOR XML path ('')
			)
			exec sp_executesql @sql
			declare @COLS varchar(max)=
			(SELECT LEFT(X,LEN(X)-1) FROM
			(SELECT
			(select REPLACE(LINE,'_%','')+','
			from DBO.SP_MI_SPLITTEXT(@header,',')
			where LINENUM >= 5
			order by LINENUM
			FOR XML path ('')
			) AS X) XX
			)*/
	SET @bulkinsert =
		   N'BULK INSERT #temp_MARA_Results_Class FROM ''' +
		   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ClassOut.txt' +
		   N''' WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
	EXEC sp_executesql @bulkinsert;
	--LW create temp class files 11/11/18 ;
	set @sql = 'Select * into TEMP_MARA_CLASS_'+@DTSTRING+' from #temp_Mara_Results_Class'
	EXEC sp_executesql @sql

	       /*
			set @sql = 'insert into DBO.Member_MARA_Results_Class WITH (TABLOCK) (MI_PERSON_KEY, Category, [Count], MaxMonth, ModelName, ModelPercent, MaxIncurredDate, MI_POST_DATE)' + CHAR(10)
			set @sql = @sql + 'select MI_PERSON_KEY, Category, [Count], MaxMonth, ModelName, ModelPercent, ''' + convert(	varchar(10), @MaxIncurredDt, 101) + ''' as MaxIncurredDt, ''' + convert(varchar(10), @MI_POST_DATE, 101) + ''' as MI_POST_DATE' + CHAR(10)
			set @sql = @sql + 'from (SELECT' + CHAR(10)
			set @sql = @sql + 'mi_person_key , category, [Count], MaxMonth, '+ @COLS + ' from #temp_MARA_Results_Class c' + CHAR(10)
			set @sql = @sql + ') c UNPIVOT' + CHAR(10)
			set @sql = @sql + '(ModelPercent for ModelName IN (' + @COLS + ')) as unpvt;'
			exec sp_executesql @sql
			*/
			 -- LW 6/23/17 Load MARA clinical classification without Model Name & % b/c HSC does not have license     
			set @sql = 'insert into Member_MARA_Results_Class WITH (TABLOCK) (MI_PERSON_KEY, Category, [Count], MaxMonth, ModelName, ModelPercent, MaxIncurredDate, MI_POST_DATE)' + CHAR(10)
			set @sql = @sql + 'select MI_PERSON_KEY, Category, [Count], MaxMonth, Null as ModelName, Null as ModelPercent, ''' + convert(	varchar(10), @MaxIncurredDt, 101) + ''' as MaxIncurredDt, ''' + convert(varchar(10), @MI_POST_DATE, 101) + ''' as MI_POST_DATE' + CHAR(10)
			set @sql = @sql + ' from  #temp_MARA_Results_Class '+char(10)
			exec sp_executesql @sql
	       

	EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Results_Class;
	-- Import the Member_MARA_Results_Risk data
	EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Results_Risk;
	CREATE TABLE #temp_MARA_Results_Risk
	(
		MI_PERSON_KEY INT,
		ModelName varchar(15),
		Total NUMERIC(12,4),
		Rx NUMERIC(12,4),
		Medical NUMERIC(12,4),
		IP NUMERIC(12,4),
		OP NUMERIC(12,4),
		Physician NUMERIC(12,4),
		ER NUMERIC(12,4),
		Oth NUMERIC(12,4),
		Junk1 varchar(10),
		Junk2 varchar(10),
		Junk3 varchar(10)
	);
	SET @bulkinsert =
		   N'BULK INSERT #temp_MARA_Results_Risk FROM ''' +
		   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ModelOut.txt' +
		   N''' WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
	EXEC sp_executesql @bulkinsert;
	
	
	set @sql ='insert dbo.Member_MARA_Results_Risk WITH (TABLOCK) (MI_PERSON_KEY, ModelName, Total, Rx, Medical, IP, OP, Physician, ER, Oth, MaxIncurredDate, MI_POST_DATE)' +char(10)
	set @sql = @sql + 'select' +char(10)
	set @SQL=@SQL+ 'mi_person_key, ModelName, Total, Rx, Medical, IP, OP, Physician, ER, Oth, '''+convert(char(8),@MaxIncurredDt,112)+''' as MaxIncurredDate, '''+convert(char(8),@MI_POST_DATE ,112)+''' as MI_POST_DATE' +char(10)
	set @SQL=@SQL+ 'from #temp_MARA_Results_Risk r'+char(10)
	exec sp_executesql @sql

	EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Results_Risk;
	
	
	
	-- Insert the member exceptions
	truncate table #temp_MARA_Member_Exceptions 
	SET @bulkinsert =
		   N'BULK INSERT #temp_MARA_Member_Exceptions FROM ''' +
		   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_InvalidMember.txt' +
		   N''' WITH (FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
	EXEC sp_executesql @bulkinsert;

	set @sql ='insert dbo.Member_MARA_Exceptions WITH (TABLOCK) (MI_PERSON_KEY, ExceptionDesc, ExceptionCause, MODE, MaxIncurredDate, MI_POST_DATE)' +char(10)
	set @sql = @sql + 'select' +char(10)
	set @SQL=@SQL+ 'mi_person_key, Reason as ExceptionDesc, ''Invalid Member Exception'' as ExceptionCause, ''MARA'', '''+convert(char(8),@MaxIncurredDt,112)+''' as MaxIncurredDate, '''+convert(char(8),@MI_POST_DATE ,112)+''' as MI_POST_DATE' +char(10)
	set @SQL=@SQL+ 'from #temp_MARA_Member_Exceptions r'+char(10)
	exec sp_executesql @sql


		 
	-- Insert the claim exceptions
	truncate table #temp_MARA_Claim_Exceptions 
	SET @bulkinsert =
		   N'BULK INSERT #temp_MARA_Claim_Exceptions FROM ''' +
		   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_InvalidClaim.txt' +
		   N''' WITH (FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
	EXEC sp_executesql @bulkinsert;

	set @sql ='insert dbo.Member_MARA_Exceptions WITH (TABLOCK) (MI_PERSON_KEY, ExceptionDesc, ExceptionCause, MODE, MaxIncurredDate, MI_POST_DATE)' +char(10)
	set @sql = @sql + 'select' +char(10)
	set @SQL=@SQL+ 'MI_PERSON_KEY, Reason as ExceptionDesc, ''Invalid Member Exception'' as ExceptionCause, ''MARA'', '''+convert(char(8),@MaxIncurredDt,112)+''' as MaxIncurredDate, '''+convert(char(8),@MI_POST_DATE ,112)+''' as MI_POST_DATE' +char(10)
	set @SQL=@SQL+ 'from #temp_MARA_Member_Exceptions r'+char(10)
	exec sp_executesql @sql

	
 
	--The number of rows in the MARA subject table ('DBO.TEMP_MARA_MEMBERS_WINDOW') should match the number of
	--of rows in the MARA output table -MARA_Results_Script plus the MARA exception table - MARA_Exceptions
	Declare @MARAExcept int
	Declare @MARACalcs int
	 SELECT @MARACalcs = count(distinct mi_person_key) from dbo.Member_MARA_Results_Risk WHERE MI_POST_DATE = @MI_POST_DATE
	 IF @MARASubjects <> (@MARAExcept + @MARACalcs) BEGIN
	  SET @MSG='ERROR:  MARA ROWCOUNT OUTPUT DOES NOT MATCH INPUT (OUT: '+CONVERT(VARCHAR(12),@MARAExcept + @MARACalcs)+'  IN: '+CONVERT(VARCHAR(12),@MARASubjects)+')'
	  EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;
	  END

	
	SET @MSG= 'MARA ROW VOLUME VALIDATED';
	SET @PERF_DURATION=DATEDIFF(MINUTE,@PERF_START,GETDATE());
    EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG, @DURATION_IN_MIN=@PERF_DURATION, @LOG2ID=@LOGID

	EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_MEMBERS_WINDOW'
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, 'MARA RESULTS LOADED', @LOG2ID=@LOGID;

	--ADD RISING RISK IF REQUESTED AND IF THE MODELS BEING RUN FOR THE CURRENT PERIOD INCLUDE AT LEAST ONE PROSPECTIVE MODEL
	DECLARE @IS_PROSPECTIVE_MODEL_RUN BIT;
	SELECT @IS_PROSPECTIVE_MODEL_RUN = CASE WHEN CHARINDEX('PRO', @MARAMODELNAMES) > 0 THEN 1 ELSE 0 END;
	IF @RUN_RISING_RISK = 'YES' AND @IS_PROSPECTIVE_MODEL_RUN = 1
	BEGIN
		--CREATING A NEW SETTING FILE, UPDATING THE MODEL NAME TO RISINGRISK.
		EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_XMLOUT'
		SET @XMLOUT = REPLACE(@XMLOUT, @MARAMODELNAMES,'RISINGRISK');
		select @XMLOUT as xmlText into DBO.TEMP_MARA_XMLOUT
		SELECT  @command = 'bcp "select xmlText from ' + @DB + '.DBO.TEMP_MARA_XMLOUT'
					  + '" queryout '
					  + '"' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Settings.xml"' + ' '
					 + '-c'
					  + ' -T -S '+@@SERVERNAME
		EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT;

		--RUN THE MARA RISING RISK MODEL
		SET @MSG='RISING RISK CALCULATIONS START';
		EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;
		SET @CMD = @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_mara.bat'
		EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @CMD, @LOG2ID=@LOGID;
		DECLARE @PERF_START2 datetime = GETDATE();

		DELETE FROM @CMDOUT;
		INSERT @CMDOUT (OUTLINE)
		  EXEC @RC=master..xp_cmdshell @CMD
		SET @LASTROWID=@@IDENTITY
		UPDATE @CMDOUT SET PROCNAME=@PROC, TSTAMP=SYSDATETIME()
		WHERE ROWID BETWEEN @LASTROWID-10 AND @LASTROWID

		SELECT @PERF_ROW= CONVERT(INT,REPLACE(OUTLINE,' rows copied.','')) 
						   FROM @CMDOUT WHERE OUTLINE LIKE '%copied%'

		IF @RC > 0 OR EXISTS (SELECT * FROM @CMDOUT WHERE OUTLINE LIKE '%Error%' OR OUTLINE LIKE '%License%') BEGIN
				SET @MSG=(SELECT OUTLINE+CHAR(10) FROM @CMDOUT WHERE ROWID BETWEEN (SELECT MAX(ROWID)-10 FROM @CMDOUT) AND (SELECT MAX(ROWID) FROM @CMDOUT) ORDER BY ROWID FOR XML PATH(''))
				SET @MSG='MARA GROUPER FAILURE FOR RISING RISK'+CHAR(10)+CHAR(10)+@MSG
				EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @CMD,@PERF_ROW, @LOG2ID=@LOGID;

		END
		SET @PERF_DURATION=DATEDIFF(MINUTE,@PERF_START2,GETDATE());		
		SET @MSG='RISING RISK CALCULATIONS COMPLETE'
		EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG, @DURATION_IN_MIN=@PERF_DURATION, @LOG2ID=@LOGID;

		--LOAD THE OUTPUT FOR THE RISING RISK MODEL - RISK SCORE
		TRUNCATE TABLE DBO.TEMP_MARA_RESULTS_RISING_RISK;
		SET @bulkinsert =
			   N'BULK INSERT DBO.TEMP_MARA_RESULTS_RISING_RISK FROM ''' +
			   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ModelOut.txt' +
			   N''' WITH (TABLOCK, FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
		EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @bulkinsert, @LOG2ID=@LOGID;
		EXEC sp_executesql @bulkinsert;
	
		INSERT INTO DBO.MEMBER_MARA_RESULTS_RISING_RISK WITH (TABLOCK) (MI_PERSON_KEY, TOTAL_SCORE, RX_SCORE, MAX_INCURRED_DATE, MI_POST_DATE)
			SELECT MI_PERSON_KEY, TOTAL_SCORE, RX_SCORE, @MaxIncurredDt, @MI_POST_DATE
			FROM DBO.TEMP_MARA_RESULTS_RISING_RISK
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0;

		--LOAD THE OUTPUT FOR THE RISING RISK MODEL - CLASSIFICATION
		TRUNCATE TABLE DBO.TEMP_MARA_RESULTS_RISING_RISK_CLASSIFICATION;
		SET @bulkinsert =
			   N'BULK INSERT DBO.TEMP_MARA_RESULTS_RISING_RISK_CLASSIFICATION FROM ''' +
			   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ClassOut.txt' +
			   N''' WITH (TABLOCK, FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
		EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @bulkinsert, @LOG2ID=@LOGID;
		EXEC sp_executesql @bulkinsert;

		INSERT INTO DBO.MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION WITH (TABLOCK) (MI_PERSON_KEY, CLASSIFICATION, [COUNT], LAST_MONTH_OBSERVRED, MAX_INCURRED_DATE, MI_POST_DATE)
		SELECT MI_PERSON_KEY, CLASSIFICATION, [COUNT], LAST_MONTH_OBSERVRED, @MaxIncurredDt, @MI_POST_DATE 
			FROM DBO.TEMP_MARA_RESULTS_RISING_RISK_CLASSIFICATION
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0;
	END --END RUN RISING RISK


END --IF @MODE IN ('BOTH','MARA')
IF @MODE IN ('BOTH','HCC') AND @CONCONLY = 0 BEGIN  --ONLY RUN IF HCC ENABLED, AND NOT A "CONCURRENT ONLY" MARA RISK WINDOW
		SET @MSG=CHAR(10)+CHAR(10)+'*** STARTING HCC RUN FOR ENDING MONTH:  '+CONVERT(CHAR(10),@MaxIncurredDt,112)+CHAR(10)
		EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;         
		EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_BATCH_FILE'
		SET @BAT = LEFT(@MARAINSTALLPATHSHORT, 2) + char(10) + CHAR(13) +
		'CD "' + @MARAINSTALLPATHSHORT + '"' + char(10) + char(13) +
		'java -jar -Xmx'+@MARAMEM+'m '+@MARAEXE+' '+@DB+'_'+@DTSTRING+'_HCC_settings.xml'
		select @BAT as BATTEXT into DBO.TEMP_MARA_BATCH_FILE
		--then we execute the BCP to save the file
		  SELECT  @command = 'bcp "select BATTEXT FROM ' + @DB + '.DBO.TEMP_MARA_BATCH_FILE" queryout ' + '"' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_mara.bat"' + ' -c -T -S '+@@SERVERNAME
		  EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @command, @LOG2ID=@LOGID;  
		  EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
		EXEC DBO.SP_MI_DROPTABLE 'dbo.TEMP_MARA_BATCH_FILE'

		----loop
		DECLARE @Year varchar(4);
		
		DECLARE @Parm varchar(55);
		DECLARE @Setting varchar(55);
		DECLARE HHSYEAR_CURSOR CURSOR LOCAL FOR
		SELECT Parm, Setting FROM DBO.MI_PARMS WHERE Parm LIKE 'MARA HCC%ENABLED';
		OPEN  HHSYEAR_CURSOR
		FETCH NEXT FROM HHSYEAR_CURSOR INTO @Parm,@Setting;
		SET @INNERLOOP = @@FETCH_STATUS
		WHILE @INNERLOOP = 0
			BEGIN 
			SET @Year = SUBSTRING(@Parm, 10,4)
				 PRINT @Parm
				 PRINT @Setting
				 PRINT @Year

				IF @Setting = 'YES'
					BEGIN
						EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_XMLOUT'	
						SET @XMLOUT =
						'<?xml version="1.0" encoding="UTF-8"?>' + char(10) +
						'<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">' + char(10) +
						'<properties>' + char(10) +
						'<comment>' + char(10) +
						'MARA Properties' + char(10) +
						'</comment>' + char(10) +
						'<entry key="Member_Input_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Members.csv</entry>' + char(10) +
						'<entry key="Medical_Claim_Input_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Med.csv</entry>' + char(10) +
						'<entry key="Pharmacy_Claim_Input_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Rx.csv</entry>' + char(10) +
						'<entry key="Model_Output_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_ModelOut.txt</entry>' + char(10) +
						'<entry key="Med_Classification_Output_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_ClassOut.txt</entry>' + char(10) +
						'<entry key="Data_Quality_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_DataQuality.txt</entry>' + char(10) +
						'<entry key="Log_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_Log.txt</entry>' + char(10) +
						'<entry key="Invalid_Member_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_InvalidMember.txt</entry>' + char(10) +
						'<entry key="Invalid_Claim_File_Location">' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_InvalidClaim.txt</entry>' + char(10) +
						'<entry key="License_File_Location">' + @MARAINSTALLPATHSHORT + '\mara.lic</entry>' + char(10) +
						'<entry key="MARA_APP_Folder_Location">' + @MARAINSTALLPATHSHORT + '\Application Data\</entry>' + char(10) +
						'<entry key="End_Claim_Collection_Period_Date">' + CONVERT(VARCHAR(10), DATEADD(D,-1,DATEADD(M,+1,@MaxIncurredDt)), 101) + '</entry>' + char(10) +
						'<entry key="Model_List">HHS' +  @YEAR + '</entry>' + char(10) +
						'<entry key="Input_File_Date_Format">MM/dd/yyyy</entry>' + char(10) +
						'<entry key="Number_Diagnoses">15</entry>' + char(10) +
						'<entry key="Number_Report_Variable_Fields">0</entry>' + char(10) +
						'<entry key="Output_Percent_Contributions">True</entry>' + char(10) +
						'<entry key="Use_Prior_Cost_Predictor_Prospective">' + CASE WHEN @MARAPRIORCOST = 'YES' THEN 'TRUE' ELSE 'FALSE' END+ '</entry>' + char(10) +
						'<entry key="Output_Extra_Member_Detail">False</entry>' + char(10) +
						'</properties>'
						select @XMLOUT as xmlText into DBO.TEMP_MARA_XMLOUT
						--then we execute the BCP to save the file
						  SELECT  @command = 'bcp "select xmlText from ' + @DB + '.DBO.TEMP_MARA_XMLOUT'
								  + '" queryout '
								  + '"' + @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_Settings.xml"' + ' '
								 + '-c'
								  + ' -T -S '+@@SERVERNAME
		          
						  EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
		 
								EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_XMLOUT'
		       
				SET @MSG= 'HCC CALCULATIONS START'
				EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;  
				SET @CMD = @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_mara.bat'
				EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @CMD, @LOG2ID=@LOGID; 																																																																																	
				DELETE @CMDOUT
				INSERT @CMDOUT (OUTLINE)
				  EXEC @RC=master..xp_cmdshell @CMD
				SET @LASTROWID=@@IDENTITY
				UPDATE @CMDOUT SET PROCNAME=@PROC, TSTAMP=SYSDATETIME()
				WHERE ROWID BETWEEN @LASTROWID-10 AND @LASTROWID
				SELECT @PERF_ROW= CONVERT(INT,REPLACE(OUTLINE,' rows copied.','')) 
					   FROM @CMDOUT WHERE OUTLINE LIKE '%copied%'

				IF @RC > 0 OR EXISTS (SELECT * FROM @CMDOUT WHERE OUTLINE LIKE '%Error%' OR OUTLINE LIKE '%License%') BEGIN
						SET @MSG=(SELECT OUTLINE+CHAR(10) FROM @CMDOUT WHERE ROWID BETWEEN (SELECT MAX(ROWID)-10 FROM @CMDOUT) AND (SELECT MAX(ROWID) FROM @CMDOUT) ORDER BY ROWID FOR XML PATH(''))
						SET @MSG='MARA GROUPER FAILURE'+CHAR(10)+CHAR(10)+@MSG
						EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG,@PERF_ROW, @LOG2ID=@LOGID; 
				END
				SET @PERF_DURATION=DATEDIFF(MINUTE,@PERF_START,GETDATE());
				SET @PERF_START=GETDATE();
                EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,'HCC CALCULATIONS COMPLETE', @DURATION_IN_MIN=@PERF_DURATION, @LOG2ID=@LOGID

	-- Import the Member_MARA_Results_Class data
	EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Results_HCC_Class;
	CREATE TABLE #temp_MARA_Results_HCC_Class
	(
		MI_PERSON_KEY INT,
		HHS_HCC_CLASS Varchar(50)
	);
	SET @bulkinsert =
		   N'BULK INSERT #temp_MARA_Results_HCC_Class FROM ''' +
		   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_ClassOut.txt' +
		   N''' WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
	EXEC sp_executesql @bulkinsert;
	       
	set @sql = 'insert DBO.MEMBER_MARA_RESULTS_HCC_CLASS WITH (TABLOCK) (MI_PERSON_KEY, HHS_HCC_CLASS, MaxIncurredDate, MI_POST_DATE, HHSYEAR)' + CHAR(10)
	set @sql = @sql + 'select'+CHAR(10) 
	set @sql = @sql + 'MI_PERSON_KEY, HHS_HCC_CLASS, '''+convert(char(8),@MaxIncurredDt,112)+''' as MaxIncurredDate, '''+convert(char(8),@MI_POST_DATE ,112)+''' as MI_POST_DATE,' + @YEAR + ' AS HHSYEAR'  +CHAR(10)
	SET @SQL=@SQL+ 'from #temp_MARA_Results_HCC_Class c' + CHAR(10)
	exec sp_executesql @sql

       
	EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Results_HCC_Class;
	-- Import the Member_MARA_Results_HCC_Risk data
	EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Results_HCC_Risk;
	CREATE TABLE #temp_MARA_Results_HCC_Risk
	(
		MI_PERSON_KEY INT,
		ModelName varchar(15),
		Final NUMERIC(12,4),
		Platinum NUMERIC(12,4),
		Gold NUMERIC(12,4),
		Silver NUMERIC(12,4),
		Bronze NUMERIC(12,4),
		Catastrophic NUMERIC(12,4),
		Platinum_CSR NUMERIC(12,4),
		Gold_CSR NUMERIC(12,4),
		Silver_CSR NUMERIC(12,4),
		Bronze_CSR NUMERIC(12,4),
		Catastrophic_CSR NUMERIC(12,4),
		Junk1 varchar(10),
		Junk2 varchar(10),
		Junk3 varchar(10)
	);
	SET @bulkinsert =
		   N'BULK INSERT #TEMP_MARA_RESULTS_HCC_Risk FROM ''' +
		   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_ModelOut.txt' +
		   N''' WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
	EXEC sp_executesql @bulkinsert;



	set @sql ='insert dbo.Member_MARA_Results_HCC_Risk WITH (TABLOCK) (MI_PERSON_KEY, ModelName, Final, Platinum, Gold, Silver, Bronze, Catastrophic, Platinum_CSR, Gold_CSR, Silver_CSR, Bronze_CSR, Catastrophic_CSR, MaxIncurredDate, MI_POST_DATE,' + 'HHSYEAR' + ')' + CHAR(10)
	set @sql = @sql + 'select' +char(10)
	set @SQL=@SQL+ 'MI_PERSON_KEY, ModelName, Final, Platinum, Gold, Silver, Bronze, Catastrophic, Platinum_CSR, Gold_CSR, Silver_CSR, Bronze_CSR, Catastrophic_CSR, '''+convert(char(8),@MaxIncurredDt,112)+''' as MaxIncurredDate, '''+convert(char(8),@MI_POST_DATE ,112)+''' as MI_POST_DATE,' + @Year + ' AS HHSYEAR' + CHAR(10)
	set @SQL=@SQL+ 'from #temp_MARA_Results_HCC_Risk r'+char(10)
	exec sp_executesql @sql

	EXEC DBO.SP_MI_DROPTABLE #temp_MARA_Results_HCC_Risk;
	
	
	
	-- Insert the member exceptions
	truncate table #temp_MARA_Member_Exceptions 
	SET @bulkinsert =
		   N'BULK INSERT #temp_MARA_Member_Exceptions FROM ''' +
		   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_InvalidMember.txt' +
		   N''' WITH (FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
	EXEC sp_executesql @bulkinsert;

	set @sql ='insert dbo.Member_MARA_Exceptions WITH (TABLOCK) (MI_PERSON_KEY, ExceptionDesc, ExceptionCause, MODE, MaxIncurredDate, MI_POST_DATE)' +char(10)
	set @sql = @sql + 'select' +char(10)
	set @SQL=@SQL+ 'MI_PERSON_KEY, Reason as ExceptionDesc, ''Invalid Member Exception'' as ExceptionCause, ''HCC'', '''+convert(char(8),@MaxIncurredDt,112)+''' as MaxIncurredDate, '''+convert(char(8),@MI_POST_DATE ,112)+''' as MI_POST_DATE' +char(10)
	set @SQL=@SQL+ 'from #temp_MARA_Member_Exceptions r'+char(10)
	exec sp_executesql @sql


		 
	-- Insert the claim exceptions
	truncate table #temp_MARA_Claim_Exceptions 
	SET @bulkinsert =
		   N'BULK INSERT #temp_MARA_Claim_Exceptions FROM ''' +
		   @MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_InvalidClaim.txt' +
		   N''' WITH (FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'')';
	EXEC sp_executesql @bulkinsert;

	set @sql ='insert dbo.Member_MARA_Exceptions WITH (TABLOCK) (MI_PERSON_KEY, ExceptionDesc, ExceptionCause, MODE, MaxIncurredDate, MI_POST_DATE)' +char(10)
	set @sql = @sql + 'select' +char(10)
	set @SQL=@SQL+ 'MI_PERSON_KEY, Reason as ExceptionDesc, ''Invalid Member Exception'' as ExceptionCause, ''HCC'', '''+convert(char(8),@MaxIncurredDt,112)+''' as MaxIncurredDate, '''+convert(char(8),@MI_POST_DATE ,112)+''' as MI_POST_DATE' +char(10)
	set @SQL=@SQL+ 'from #temp_MARA_Member_Exceptions r'+char(10)
	exec sp_executesql @sql
	SET @MSG='HCC RESULTS LOADED';
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;
END
FETCH NEXT FROM HHSYEAR_CURSOR INTO @Parm, @Setting
SET @INNERLOOP = @@FETCH_STATUS
END;
CLOSE HHSYEAR_CURSOR;
DEALLOCATE HHSYEAR_CURSOR

END --IF @MODE IN ('BOTH','HCC') 



	if @debug=0 begin
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_InvalidMember.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_InvalidClaim.txt' 
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ModelOut.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	--set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_ClassOut.txt'
	--EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_InvalidMember.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_InvalidClaim.txt' 
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_ModelOut.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_HCC_ClassOut.txt'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Rx.csv'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Med.csv'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	set @command='del '+@MARAINSTALLPATHSHORT + '\'+@DB+'_'+@DTSTRING+'_Members.csv'
	EXEC @RESULT = MASTER..xp_cmdshell @command, NO_OUTPUT
	end

	FETCH NEXT FROM XLOOP INTO @MAXINCURREDDT, @CONCONLY
	SET @OUTERLOOP = @@FETCH_STATUS
END --WHILE @@FETCH_STATUS
CLOSE XLOOP
DEALLOCATE XLOOP



EXEC DBO.SP_MI_DROPTABLE #MMONTHS
-- MEMBER MONTH SUMMARY FOR POST-PROCESSING
SELECT MEMBER_MONTH_START_DATE, MEMBER_KEY, 
		SUM(MM_UNITS) MM_UNITS, SUM(RX_UNITS) RX_UNITS
		INTO #MMONTHS
		FROM DBO.MEMBER_MONTH
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
		WHERE MM_UNITS>0 OR RX_UNITS>0
		GROUP BY MEMBER_MONTH_START_DATE,MEMBER_KEY 

	EXEC DBO.SP_MI_DROPTABLE '#MM'
	SELECT MEMBER_MONTH_START_DATE,MEMBER_KEY,MM_UNITS, RX_UNITS, PROD_TYPE_KEY, 
	MDL_CON.MARA_MODEL_KEY AS CON_MARA_MODEL_KEY, MDL_PRO.MARA_MODEL_KEY AS PRO_MARA_MODEL_KEY, MDL_AS.MARA_MODEL_KEY AS AS_MARA_MODEL_KEY
	--,MDL_MCCON.MARA_MODEL_KEY AS MCCON_MARA_MODEL_KEY, MDL_MCPRO.MARA_MODEL_KEY AS MCPRO_MARA_MODEL_KEY
	INTO #MM
	FROM ( 
	SELECT MM.*

		,CASE WHEN MM_UNITS <> 0 AND RX_UNITS <> 0 THEN 'CXCONLAG0'
		 WHEN MM_UNITS <> 0 AND RX_UNITS = 0 THEN 'DXCONLAG0'
		 WHEN MM_UNITS = 0 AND RX_UNITS <> 0 THEN 'RXCONLAG0' END CON_MODEL

		,CASE WHEN MM_UNITS <> 0 AND RX_UNITS <> 0 THEN 'CXPROLAG'+@MODELLAG
		 WHEN MM_UNITS <> 0 AND RX_UNITS = 0 THEN 'DXPROLAG'+@MODELLAG
		 WHEN MM_UNITS = 0 AND RX_UNITS <> 0 THEN 'RXPROLAG'+@MODELLAG END PRO_MODEL

		--,CASE WHEN MM_UNITS <> 0 AND RX_UNITS <> 0 THEN 'MCCONLAG0'
		-- WHEN MM_UNITS <> 0 AND RX_UNITS = 0 THEN 'MCCONLAG0'
		-- WHEN MM_UNITS = 0 AND RX_UNITS <> 0 THEN 'RXCONLAG0' END AS MCR_CON_MODEL

		--,CASE WHEN MM_UNITS <> 0 AND RX_UNITS <> 0 THEN 'MCPROLAG0'
		-- WHEN MM_UNITS <> 0 AND RX_UNITS = 0 THEN 'MCPROLAG0'
		-- WHEN MM_UNITS = 0 AND RX_UNITS <> 0 THEN 'RXPROLAG0' END AS MCR_PRO_MODEL

		,'ASCONLAG0' AS_MODEL
		,PROD_TYPE_KEY

	FROM #MMONTHS MM
	INNER JOIN DBO.RFT_PROD_TYPE PROD
	ON PROD.PROD_TYPE = CASE WHEN MM_UNITS <> 0 THEN 'MEDICAL' WHEN MM_UNITS = 0 AND RX_UNITS <> 0 THEN 'RX' END
	) MM_OUTER
	INNER JOIN DBO.MI_MARA_MODELS MDL_CON
	ON MM_OUTER.CON_MODEL = MDL_CON.MARA_MODEL_ID
	INNER JOIN DBO.MI_MARA_MODELS MDL_PRO
	ON MM_OUTER.PRO_MODEL = MDL_PRO.MARA_MODEL_ID
	INNER JOIN DBO.MI_MARA_MODELS MDL_AS
	ON MM_OUTER.AS_MODEL = MDL_AS.MARA_MODEL_ID
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
	--INNER JOIN DBO.MI_MARA_MODELS MDL_MCCON
	--ON MM_OUTER.MCR_CON_MODEL = MDL_MCCON.MARA_MODEL_ID
	--INNER JOIN DBO.MI_MARA_MODELS MDL_MCPRO
	--ON MM_OUTER.MCR_PRO_MODEL = MDL_MCPRO.MARA_MODEL_ID


	CREATE UNIQUE CLUSTERED INDEX X ON #MM (MEMBER_MONTH_START_DATE, MEMBER_KEY,PROD_TYPE_KEY)


--MARA MODELS POST-PROCESSING
IF @MODE IN ('MARA','BOTH') BEGIN

	SET @MSG='MARA POST-PROCESS STARTED';
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;
	-- UPDATE POST_DATE
	UPDATE dbo.Member_MARA_Results_Script
	SET MI_POST_DATE=@MI_POST_DATE
	WHERE MI_POST_DATE IS NULL
	
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_Risk','ON';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_Class','ON';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_Script','ON';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT

	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'MEMBER_MARA_RESULTS_RISING_RISK_CLASSIFICATION','ON',@ALL='TRUE';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'MEMBER_MARA_RESULTS_RISING_RISK','ON',@ALL='TRUE';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT


	EXEC DBO.SP_MI_DROPTABLE 'dbo.rft_mara_scaling_factors'
	CREATE TABLE dbo.RFT_MARA_SCALING_FACTORS (
	AS_FACTOR numeric(10,8),
	CX_CON_FACTOR numeric(10,8),
	CX_PRO_FACTOR numeric(10,8),
	DX_CON_FACTOR numeric(10,8),
	DX_PRO_FACTOR numeric(10,8),
	RX_CON_FACTOR numeric(10,8),
	RX_PRO_FACTOR numeric(10,8),
	MC_CON_FACTOR numeric(10,8),
	MC_PRO_FACTOR numeric(10,8)
	)
	insert into dbo.RFT_MARA_SCALING_FACTORS values 
	(1.008
	,1.041
	,1.004
	,0.891
	,0.848
	,0.174
	,0.187 
	,0.891 --copied from commercial DX
	,0.848 --copied from commercial DX
	)

	IF @NORMAL <> 'YES' 
		UPDATE dbo.RFT_MARA_SCALING_FACTORS 
			SET 
			AS_FACTOR	=1,
			CX_CON_FACTOR  =1,
			CX_PRO_FACTOR  =1,
			DX_CON_FACTOR  =1,
			DX_PRO_FACTOR  =1,
			RX_CON_FACTOR  =1,
			RX_PRO_FACTOR  =1,
			MC_CON_FACTOR  =1,
			MC_PRO_FACTOR  =1



	-- Lookup Tables for MARA Conditions:

	EXEC DBO.SP_MI_DROPTABLE '#MAXPOST'
	SELECT MI_PERSON_KEY, MODELNAME, MAXINCURREDDATE, MAX(MI_POST_DATE) AS MAXPOST
	INTO #MAXPOST
	FROM DBO.MEMBER_MARA_RESULTS_RISK
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
	GROUP BY MI_PERSON_KEY, MODELNAME, MAXINCURREDDATE
	create unique clustered index x on #maxpost (MI_PERSON_KEY, MODELNAME, MAXINCURREDDATE)


	EXEC DBO.SP_MI_DROPTABLE '#MAXPERCENT'
	SELECT a.MI_PERSON_KEY, a.MODELNAME, a.MAXINCURREDDATE, a.MI_POST_DATE, MAX(a.MODELPERCENT) AS MAXPERC
	INTO #MAXPERCENT
	FROM dbo.MEMBER_MARA_RESULTS_CLASS A
		INNER JOIN #MAXPOST B ON A.MI_PERSON_KEY = b.MI_PERSON_KEY and a.ModelName = b.ModelName and a.MaxIncurredDate = b.MaxIncurredDate and a.MI_POST_DATE = b.MAXPOST
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
	WHERE a.MODELPERCENT>0
	GROUP BY a.MI_PERSON_KEY, a.MODELNAME, a.MAXINCURREDDATE, a.MI_POST_DATE

	CREATE CLUSTERED INDEX X ON #MAXPERCENT (MODELNAME, MI_PERSON_KEY, MAXINCURREDDATE, MI_POST_DATE,MAXPERC)

	EXEC DBO.SP_MI_DROPTABLE '#MAXCATEGORY'
	SELECT Z.MODELNAME, Z.MI_PERSON_KEY, Z.MAXINCURREDDATE, Z.MI_POST_DATE,MAX(Category) MaxCategory
	INTO #MAXCATEGORY
	FROM #MAXPERCENT Z
	INNER JOIN dbo.MEMBER_MARA_RESULTS_CLASS X
	ON X.MODELNAME=Z.MODELNAME AND X.MI_PERSON_KEY=Z.MI_PERSON_KEY AND X.MAXINCURREDDATE=Z.MAXINCURREDDATE AND X.MI_POST_DATE=Z.MI_POST_DATE AND
			X.MODELPERCENT = Z.MAXPERC
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
	GROUP BY Z.MODELNAME, Z.MI_PERSON_KEY, Z.MAXINCURREDDATE, Z.MI_POST_DATE
	                            
	CREATE CLUSTERED INDEX X ON #MAXCATEGORY (MODELNAME, MI_PERSON_KEY, MAXINCURREDDATE, MI_POST_DATE,MaxCategory)

	TRUNCATE TABLE [dbo].MEMBER_MARA_RISK_CLASS
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'dbo.MEMBER_MARA_RISK_CLASS','OFF',@ALL=1;IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	INSERT [dbo].MEMBER_MARA_RISK_CLASS WITH (TABLOCK)
	(       MARA_MODEL_KEY,
			[MEMBER_KEY],
			[MARACLASS_KEY],
			INSTANCES,
			LATEST_MONTH,
			MODEL_PERCENT,
			[MAXINCURREDDATE],
			[MI_POST_DATE],
			PRIMARY_RISK
	)
	SELECT
			MDL.MARA_MODEL_KEY,
			MEM.MEMBER_KEY,
			MC.MARACLASS_KEY,
			CONVERT(SMALLINT,[COUNT]) AS INSTANCES,
			CONVERT(TINYINT,MAXMONTH) AS LATEST_MONTH,
			CONVERT(NUMERIC(6,2),MODELPERCENT) AS MODEL_PERCENT,
			CONVERT(DATE,M.MAXINCURREDDATE) AS MAXINCURREDDATE,
			CONVERT(DATE,M.MI_POST_DATE) AS MI_POST_DATE,
			CONVERT(BIT,CASE WHEN Z.MaxCategory is not null THEN 1 ELSE 0 END) AS PRIMARY_RISK
	FROM DBO.Member_MARA_Results_class M
			INNER JOIN DBO.MEMBER MEM ON M.MI_PERSON_KEY = MEM.MI_PERSON_KEY
			INNER JOIN DBO.MI_MARA_MODELS MDL
			ON M.MODELNAME = MDL.MARA_MODEL_ID
			INNER JOIN DBO.RFT_MARA_CLASS MC
			ON M.CATEGORY = MC.C_CODE
			LEFT JOIN #MAXCATEGORY Z
			ON M.MODELNAME=Z.MODELNAME AND M.MI_PERSON_KEY=Z.MI_PERSON_KEY AND M.MAXINCURREDDATE=Z.MAXINCURREDDATE AND M.MI_POST_DATE=Z.MI_POST_DATE AND
				M.CATEGORY = Z.MaxCategory
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0             
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'dbo.MEMBER_MARA_RISK_CLASS','ON',@ALL=1;IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT



	EXEC DBO.SP_MI_DROPTABLE #MEMBER_MARA_RESULTS_RISK
	SELECT  A.MI_PERSON_KEY, A.[ModelName], A.[Total], A.[Rx], A.[Medical], A.[IP], A.[OP], A.[Physician], A.[MaxIncurredDate], 
			A.[mi_post_date], A.ER, A.OTH, MEM.MEMBER_KEY, MDL.MARA_MODEL_KEY,COALESCE(primary_class.MARACLASS_KEY,0) PRIMARY_MARACLASS_KEY
		INTO #MEMBER_MARA_RESULTS_RISK
	FROM DBO.MEMBER_MARA_RESULTS_RISK A
	inner join #MAXPOST mp on a.MI_PERSON_KEY = mp.MI_PERSON_KEY and a.MaxIncurredDate = mp.MaxIncurredDate and a.ModelName = mp.ModelName and a.mi_post_date = mp.MAXPOST
	INNER JOIN DBO.MEMBER MEM ON A.MI_PERSON_KEY = MEM.MI_PERSON_KEY
	INNER JOIN DBO.MI_MARA_MODELS MDL
	ON A.MODELNAME = MDL.MARA_MODEL_ID
	LEFT JOIN dbo.MEMBER_MARA_RISK_CLASS primary_class
	ON MDL.MARA_MODEL_KEY = primary_class.MARA_MODEL_KEY
	AND MEM.MEMBER_KEY = primary_class.MEMBER_KEY
	AND A.MaxIncurredDate = primary_class.MAXINCURREDDATE
		and A.mi_post_date = PRIMARY_CLASS.MI_POST_DATE
	AND primary_class.PRIMARY_RISK = 1
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0

	CREATE CLUSTERED INDEX X ON #MEMBER_MARA_RESULTS_RISK (MAXINCURREDDATE, MARA_MODEL_KEY, MEMBER_KEY,MI_POST_DATE)

	EXEC DBO.SP_MI_DROPTABLE 'DBO.MEMBER_MONTH_MARA_RISK'
	SELECT 
			MM.MEMBER_MONTH_START_DATE,
			MM.MEMBER_KEY,
			MM.EFF_DATE,
			MM.TERM_DATE,
			MM.PROD_TYPE_KEY,
			MM.MI_POST_DATE,
			CON_RISK.PRIMARY_MARACLASS_KEY PRIMARY_CON_MARACLASS_KEY,
		   CASE WHEN LEFT(CON_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[TOTAL] / factors.CX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[MEDICAL] / factors.DX_CON_FACTOR) 
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'RX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[RX] / factors.RX_CON_FACTOR) END
			AS CON_TOTAL,
			CASE WHEN LEFT(CON_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[RX] / factors.CX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'DX' THEN 0
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'RX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[RX] / factors.RX_CON_FACTOR) END
			AS CON_RX,
			CASE WHEN LEFT(CON_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[MEDICAL] / factors.CX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[MEDICAL] / factors.DX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'RX' THEN 0 END
			AS CON_MEDICAL,
			CASE WHEN LEFT(CON_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[IP] / factors.CX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[IP] / factors.DX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'RX' THEN 0 END
			AS CON_IP,
			CASE WHEN LEFT(CON_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[OP] / factors.CX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[OP] / factors.DX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'RX' THEN 0 END 
			AS CON_OP,
			CASE WHEN LEFT(CON_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[PHYSICIAN] / factors.CX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),CON_RISK.[PHYSICIAN] / factors.DX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'RX' THEN 0 END 
			AS CON_PHYSICIAN, 
			CASE WHEN LEFT(CON_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),CON_RISK.ER / factors.CX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),CON_RISK.ER / factors.DX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'RX' THEN 0 END 
			AS CON_ER, 
			CASE WHEN LEFT(CON_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),CON_RISK.OTH / factors.CX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),CON_RISK.OTH / factors.DX_CON_FACTOR)
				 WHEN LEFT(CON_RISK.MODELNAME,2) = 'RX' THEN 0 END 
			AS CON_OTH, 
			M.CON_MARA_MODEL_KEY,
			PRO_RISK.PRIMARY_MARACLASS_KEY PRIMARY_PRO_MARACLASS_KEY,
			CASE WHEN LEFT(PRO_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[TOTAL] / factors.CX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[MEDICAL] / factors.DX_PRO_FACTOR) 
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'RX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[RX] / factors.RX_PRO_FACTOR) END
			AS PRO_TOTAL,
			CASE WHEN LEFT(PRO_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[RX] / factors.CX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'DX' THEN 0
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'RX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[RX] / factors.RX_PRO_FACTOR) END
			AS PRO_RX,
			CASE WHEN LEFT(PRO_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[MEDICAL] / factors.CX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[MEDICAL] / factors.DX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'RX' THEN 0 END
			AS PRO_MEDICAL,
			CASE WHEN LEFT(PRO_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[IP] / factors.CX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[IP] / factors.DX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'RX' THEN 0 END
			AS PRO_IP,
			CASE WHEN LEFT(PRO_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[OP] / factors.CX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[OP] / factors.DX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'RX' THEN 0 END 
			AS PRO_OP,
			CASE WHEN LEFT(PRO_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[PHYSICIAN] / factors.CX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.[PHYSICIAN] / factors.DX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'RX' THEN 0 END 
			AS PRO_PHYSICIAN,
			CASE WHEN LEFT(PRO_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.ER / factors.CX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.ER / factors.DX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'RX' THEN 0 END 
			AS PRO_ER,
			CASE WHEN LEFT(PRO_RISK.MODELNAME,2) = 'CX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.OTH / factors.CX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'DX' THEN CONVERT(NUMERIC(10,6),PRO_RISK.OTH / factors.DX_PRO_FACTOR)
				 WHEN LEFT(PRO_RISK.MODELNAME,2) = 'RX' THEN 0 END 
			AS PRO_OTH,
			M.PRO_MARA_MODEL_KEY,
			CONVERT(NUMERIC(10,6),AS_RISK.[TOTAL] / factors.AS_FACTOR) AS AS_TOTAL,
			M.AS_MARA_MODEL_KEY 
			INTO DBO.MEMBER_MONTH_MARA_RISK
			FROM DBO.MEMBER_MONTH MM
			INNER JOIN #MM M ON MM.MEMBER_KEY = M.MEMBER_KEY AND MM.MEMBER_MONTH_START_DATE = M.MEMBER_MONTH_START_DATE AND MM.PROD_TYPE_KEY = M.PROD_TYPE_KEY
			INNER JOIN	DBO.MI_MARA_MONTH_MAP MAP ON MAP.MEMBER_MONTH = MM.MEMBER_MONTH_START_DATE 
			LEFT JOIN #Member_MARA_Results_Risk CON_RISK 
				ON MAP.MARA_RUN_ENDING_MONTH_CONCUR = CON_RISK.MaxIncurredDate 
				AND M.CON_MARA_MODEL_KEY = CON_RISK.MARA_MODEL_KEY
				AND MM.MEMBER_KEY = CON_RISK.MEMBER_KEY
			LEFT JOIN #Member_MARA_Results_Risk PRO_RISK 
				ON MAP.MARA_RUN_ENDING_MONTH_ALL = PRO_RISK.MaxIncurredDate 
				AND M.PRO_MARA_MODEL_KEY = PRO_RISK.MARA_MODEL_KEY
				AND MM.MEMBER_KEY = PRO_RISK.MEMBER_KEY
			LEFT JOIN #Member_MARA_Results_Risk AS_RISK 
				ON MAP.MARA_RUN_ENDING_MONTH_ALL = AS_RISK.MaxIncurredDate 
				AND M.AS_MARA_MODEL_KEY = AS_RISK.MARA_MODEL_KEY
				AND MM.MEMBER_KEY = AS_RISK.MEMBER_KEY
			CROSS JOIN DBO.RFT_MARA_SCALING_FACTORS factors
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
					
	CREATE UNIQUE CLUSTERED INDEX UC ON DBO.MEMBER_MONTH_MARA_RISK (MEMBER_MONTH_START_DATE, MEMBER_KEY, EFF_DATE, TERM_DATE, PROD_TYPE_KEY, MI_POST_DATE)

	CREATE INDEX C_1 ON DBO.MEMBER_MONTH_MARA_RISK (MEMBER_MONTH_START_DATE, MEMBER_KEY, 
			EFF_DATE,
			TERM_DATE,
			PROD_TYPE_KEY,
			MI_POST_DATE)
		INCLUDE (CON_TOTAL, CON_MARA_MODEL_KEY, PRO_TOTAL, PRO_MARA_MODEL_KEY, AS_TOTAL, AS_MARA_MODEL_KEY)


	-- this table is used strictly in VW_CLAIM since we don't want to join to the whole MM risk table

	EXEC DBO.SP_MI_DROPTABLE 'dbo.MEMBER_MONTH_PRIMARY_CONDITION'
	SELECT DISTINCT MEMBER_MONTH_START_DATE, MEMBER_KEY,PRIMARY_PRO_MARACLASS_KEY, PRIMARY_CON_MARACLASS_KEY
	INTO dbo.MEMBER_MONTH_PRIMARY_CONDITION
	FROM DBO.MEMBER_MONTH_MARA_RISK
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
	WHERE PRIMARY_PRO_MARACLASS_KEY IS NOT NULL OR PRIMARY_CON_MARACLASS_KEY IS NOT NULL

	CREATE UNIQUE CLUSTERED INDEX UC ON DBO.MEMBER_MONTH_PRIMARY_CONDITION (MEMBER_MONTH_START_DATE, MEMBER_KEY)
	SET @PERF_START = GETDATE()
	SET @MSG='MARA MEMBER MONTH TABLE CREATED';
	SET @PERF_DURATION=DATEDIFF(MINUTE,@PERF_START,GETDATE());
    EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,@MSG, @DURATION_IN_MIN=@PERF_DURATION, @LOG2ID=@LOGID


	-- need to create a member month version of all mara conditions for the AS cube
	EXEC DBO.SP_MI_DROPTABLE 'dbo.MEMBER_MONTH_MARA_RISK_CONCURRENT_CONDITIONS'
	select  MM.MEMBER_MONTH_START_DATE,
			MM.MEMBER_KEY,
			RISK_CLASS.MARACLASS_KEY,
			RISK_CLASS.MODEL_PERCENT,
			RISK_CLASS.INSTANCES 
	INTO DBO.MEMBER_MONTH_MARA_RISK_CONCURRENT_CONDITIONS
	from DBO.MEMBER_MONTH MM
	INNER JOIN #MM M ON MM.MEMBER_KEY = M.MEMBER_KEY AND MM.MEMBER_MONTH_START_DATE = M.MEMBER_MONTH_START_DATE AND MM.PROD_TYPE_KEY = M.PROD_TYPE_KEY
	INNER JOIN	DBO.MI_MARA_MONTH_MAP MAP
		ON MAP.MEMBER_MONTH = MM.MEMBER_MONTH_START_DATE 
	INNER JOIN DBO.MEMBER_MARA_RISK_CLASS RISK_CLASS
		ON M.CON_MARA_MODEL_KEY = RISK_CLASS.MARA_MODEL_KEY
		AND MM.MEMBER_KEY = RISK_CLASS.MEMBER_KEY
		AND MARA_RUN_ENDING_MONTH_CONCUR = RISK_CLASS.MAXINCURREDDATE
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
		
	EXEC DBO.SP_MI_DROPTABLE 'dbo.MEMBER_MONTH_MARA_RISK_PROSPECTIVE_CONDITIONS'
	select  MM.MEMBER_MONTH_START_DATE,
			MM.MEMBER_KEY,
			RISK_CLASS.MARACLASS_KEY,
			RISK_CLASS.MODEL_PERCENT,
			RISK_CLASS.INSTANCES 
	INTO DBO.MEMBER_MONTH_MARA_RISK_PROSPECTIVE_CONDITIONS
	from DBO.MEMBER_MONTH MM
	INNER JOIN #MM M ON MM.MEMBER_KEY = M.MEMBER_KEY AND MM.MEMBER_MONTH_START_DATE = M.MEMBER_MONTH_START_DATE AND MM.PROD_TYPE_KEY = M.PROD_TYPE_KEY
	INNER JOIN	DBO.MI_MARA_MONTH_MAP MAP
		ON MAP.MEMBER_MONTH = MM.MEMBER_MONTH_START_DATE 
	INNER JOIN DBO.MEMBER_MARA_RISK_CLASS RISK_CLASS
		ON M.PRO_MARA_MODEL_KEY = RISK_CLASS.MARA_MODEL_KEY
		AND MM.MEMBER_KEY = RISK_CLASS.MEMBER_KEY
		AND MARA_RUN_ENDING_MONTH_ALL = RISK_CLASS.MAXINCURREDDATE
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0

	SET @MSG='MARA POST-PROCESS COMPLETE'
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;

END --MARA POST PROCESSING
IF @MODE IN ('HCC','BOTH') BEGIN

	SET @MSG='HCC POST-PROCESS STARTED';
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;

	EXEC DBO.SP_MI_DROPTABLE '#MAXPOSThcc'
	SELECT MI_PERSON_KEY, MAXINCURREDDATE, MAX(MI_POST_DATE) AS MAXPOST
	INTO #MAXPOSThcc
	FROM DBO.MEMBER_MARA_RESULTS_HCC_RISK
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
	GROUP BY MI_PERSON_KEY, MAXINCURREDDATE
	create unique clustered index x on #MAXPOSThcc (MI_PERSON_KEY,  MAXINCURREDDATE)


	EXEC DBO.SP_MI_DROPTABLE #Member_MARA_Results_HCC_Risk
	SELECT a.[MI_PERSON_KEY], a.ModelName, a.Final, a.Platinum, a.Gold, a.Silver, a.Bronze, a.Catastrophic, 
			a.Platinum_CSR, a.Gold_CSR, a.Silver_CSR, a.Bronze_CSR, a.Catastrophic_CSR, a.MaxIncurredDate, 
			a.MI_POST_DATE, a.HHSYEAR, MEM.MEMBER_KEY, MDL.MARA_MODEL_KEY
		INTO #Member_MARA_Results_HCC_Risk
	FROM DBO.Member_MARA_Results_HCC_Risk A
	inner join #MAXPOSThcc mp on a.MI_PERSON_KEY = mp.MI_PERSON_KEY and a.MaxIncurredDate = mp.MaxIncurredDate and a.mi_post_date = mp.MAXPOST
	INNER JOIN DBO.MEMBER MEM ON A.MI_PERSON_KEY = MEM.MI_PERSON_KEY
	INNER JOIN DBO.MI_MARA_MODELS MDL
	ON A.MODELNAME = MDL.MARA_MODEL_ID
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0

	CREATE unique CLUSTERED INDEX X ON #Member_MARA_Results_HCC_Risk (HHSYEAR,MAXINCURREDDATE, MARA_MODEL_KEY,MEMBER_KEY,MI_POST_DATE)


	EXEC DBO.SP_MI_DROPTABLE #Member_MARA_Results_HCC_Class
	SELECT a.MI_PERSON_KEY, a.HHS_HCC_CLASS, a.MaxIncurredDate, a.MI_POST_DATE, a.HHSYEAR, MEM.MEMBER_KEY
		INTO #Member_MARA_Results_HCC_Class
	FROM DBO.Member_MARA_Results_HCC_Class A
	inner join #MAXPOSThcc mp on a.MI_PERSON_KEY = mp.MI_PERSON_KEY and a.MaxIncurredDate = mp.MaxIncurredDate and a.mi_post_date = mp.MAXPOST
	INNER JOIN DBO.MEMBER MEM ON A.MI_PERSON_KEY = MEM.MI_PERSON_KEY
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0

	CREATE CLUSTERED INDEX X ON #Member_MARA_Results_HCC_Class (HHSYEAR, MAXINCURREDDATE, MEMBER_KEY,MI_POST_DATE, HHS_HCC_CLASS)


	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_HCC_Risk','ON';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT
	EXEC @RC=DBO.SP_MI_TOGGLE_IDX 'Member_MARA_Results_HCC_Class','ON';IF @RC > 0 RAISERROR ('',16,1) WITH NOWAIT

	EXEC DBO.SP_MI_DROPTABLE 'DBO.MEMBER_MONTH_MARA_HCC_RISK'
	SELECT 
			MM.MEMBER_MONTH_START_DATE,
			MM.MEMBER_KEY,
			MM.EFF_DATE,
			MM.TERM_DATE,
			MM.PROD_TYPE_KEY,
			MM.MI_POST_DATE
			,RISK.ModelName
			,RISK.Final
			,RISK.Platinum
			,RISK.Gold
			,RISK.Silver
			,RISK.Bronze
			,RISK.Catastrophic
			,RISK.Platinum_CSR
			,RISK.Gold_CSR
			,RISK.Silver_CSR
			,RISK.Bronze_CSR
			,RISK.Catastrophic_CSR
			,HHSYEAR
			INTO DBO.MEMBER_MONTH_MARA_HCC_RISK
			FROM DBO.MEMBER_MONTH MM
			INNER JOIN #MM M ON MM.MEMBER_KEY = M.MEMBER_KEY AND MM.MEMBER_MONTH_START_DATE = M.MEMBER_MONTH_START_DATE AND MM.PROD_TYPE_KEY = M.PROD_TYPE_KEY
			INNER JOIN	DBO.MI_MARA_MONTH_MAP MAP
				ON MAP.MEMBER_MONTH = MM.MEMBER_MONTH_START_DATE 
			LEFT JOIN #Member_MARA_Results_HCC_Risk RISK
				ON MAP.MARA_RUN_ENDING_MONTH_ALL = RISK.MaxIncurredDate
				AND MM.MEMBER_KEY = RISK.MEMBER_KEY
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0
					
	CREATE UNIQUE CLUSTERED INDEX UC ON DBO.MEMBER_MONTH_MARA_HCC_RISK (HHSYEAR,MEMBER_MONTH_START_DATE, MEMBER_KEY, EFF_DATE, TERM_DATE, PROD_TYPE_KEY, MI_POST_DATE)

	EXEC DBO.SP_MI_DROPTABLE 'DBO.MEMBER_MONTH_MARA_HCC_CLASS'
	SELECT 
			MM.MEMBER_MONTH_START_DATE,
			MM.MEMBER_KEY,
			MM.EFF_DATE,
			MM.TERM_DATE,
			MM.PROD_TYPE_KEY,
			MM.MI_POST_DATE,
			CLASS.HHS_HCC_CLASS,
			HHSYEAR
			INTO DBO.MEMBER_MONTH_MARA_HCC_CLASS
			FROM DBO.MEMBER_MONTH MM
			INNER JOIN #MM M ON MM.MEMBER_KEY = M.MEMBER_KEY AND MM.MEMBER_MONTH_START_DATE = M.MEMBER_MONTH_START_DATE AND MM.PROD_TYPE_KEY = M.PROD_TYPE_KEY
			INNER JOIN	DBO.MI_MARA_MONTH_MAP MAP
				ON MAP.MEMBER_MONTH = MM.MEMBER_MONTH_START_DATE 
			LEFT JOIN #Member_MARA_Results_HCC_Class CLASS
				ON MAP.MARA_RUN_ENDING_MONTH_ALL = CLASS.MaxIncurredDate
				AND MM.MEMBER_KEY = CLASS.MEMBER_KEY
		LEFT OUTER JOIN [DBO].[ALLOW_QUERY_TO_RUN_IN_BATCH_MODE] ON 1=0

					
	CREATE UNIQUE CLUSTERED INDEX UC ON DBO.MEMBER_MONTH_MARA_HCC_CLASS (HHSYEAR,MEMBER_MONTH_START_DATE, MEMBER_KEY, EFF_DATE, TERM_DATE, PROD_TYPE_KEY, MI_POST_DATE, HHS_HCC_CLASS)
	

	SET @MSG='HCC POST-PROCESS COMPLETE';
	EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID=@LOGID;
END


EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_MEMBERS_ALL'
EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_CLAIMS_ALL'
EXEC DBO.SP_MI_DROPTABLE 'DBO.TEMP_MARA_MEMBERS_WINDOW'
EXEC DBO.SP_MI_DROPTABLE 'dbo.TEMP_MARA_MEDICAL_WINDOW'
EXEC DBO.SP_MI_DROPTABLE 'dbo.TEMP_MARA_rx_WINDOW'

EXEC @RC=DBO.MI_9815_SHRINK_LOGS; IF @RC <> 0 RAISERROR ('',16,1)


EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @LOG2ID=@LOGID,@END_FLAG=1;

END
ELSE
		EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID,'MARA DISABLED', @LOG2ID=@LOGID,@END_FLAG=1;
END TRY
BEGIN CATCH
        IF CURSOR_STATUS ('GLOBAL','XLOOP') >= 0 BEGIN
                CLOSE XLOOP
                DEALLOCATE XLOOP
                END
		IF CURSOR_STATUS ('GLOBAL','HHSYEAR_CURSOR') >= 0 BEGIN
                CLOSE HHSYEAR_CURSOR
                DEALLOCATE HHSYEAR_CURSOR
                END
        IF ERROR_STATE() = 255
			BEGIN
            SET @MSG = 'CHECKPOINTED, SKIPPING';
        EXECUTE dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, @MSG, @LOG2ID = @LOGID, @END_FLAG = 1, @INFO = @MSG;
    END
        ELSE BEGIN
			EXEC dbo.SP_MI_UTIL_LOG_EVENT @@PROCID, @DB_ID, 'FATAL ERROR', @LOG2ID=@LOGID;
			RETURN 16
        END
	END CATCH
EXEC DBO.SP_MI_CHECKPOINT_SET @PROC
EXEC @RC=DBO.MI_8900_RUN_CUSTOM_CODE @PROC; IF @RC <> 0 RETURN 16
RETURN 0



--$LastChangedDate: 2018-08-05 12:56:10 -0700 (Sun, 05 Aug 2018) $

--$LastChangedRevision: 44659 $

--$Author: schulb $

--$HeadURL: https://topsvcs.medinsight.milliman.com/svn/MedInsight/branches/Database/MI_12/MI/Schema%20Objects/Schemas/dbo/Programmability/Stored%20Procedures/MI_0541_CALC_MARA_JAVA.proc.sql $




GO


